/*
Apache JAMES Web Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RunBlobGarbageCollector200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunBlobGarbageCollector200Response{}

// RunBlobGarbageCollector200Response struct for RunBlobGarbageCollector200Response
type RunBlobGarbageCollector200Response struct {
	// Count of blobs tried against the bloom filter
	BlobCount *int32 `json:"blobCount,omitempty"`
	// Supplied associatedProbability query parameter
	BloomFilterAssociatedProbability *float64 `json:"bloomFilterAssociatedProbability,omitempty"`
	// Supplied expectedBlobCount query parameter
	BloomFilterExpectedBlobCount *int32 `json:"bloomFilterExpectedBlobCount,omitempty"`
	// Count of blobs that were garbage collected
	GcedBlobCount *int32 `json:"gcedBlobCount,omitempty"`
	// Count of distinct blob references encountered while populating the bloom filter
	ReferenceSourceCount *int32 `json:"referenceSourceCount,omitempty"`
}

// NewRunBlobGarbageCollector200Response instantiates a new RunBlobGarbageCollector200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunBlobGarbageCollector200Response() *RunBlobGarbageCollector200Response {
	this := RunBlobGarbageCollector200Response{}
	return &this
}

// NewRunBlobGarbageCollector200ResponseWithDefaults instantiates a new RunBlobGarbageCollector200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunBlobGarbageCollector200ResponseWithDefaults() *RunBlobGarbageCollector200Response {
	this := RunBlobGarbageCollector200Response{}
	return &this
}

// GetBlobCount returns the BlobCount field value if set, zero value otherwise.
func (o *RunBlobGarbageCollector200Response) GetBlobCount() int32 {
	if o == nil || IsNil(o.BlobCount) {
		var ret int32
		return ret
	}
	return *o.BlobCount
}

// GetBlobCountOk returns a tuple with the BlobCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunBlobGarbageCollector200Response) GetBlobCountOk() (*int32, bool) {
	if o == nil || IsNil(o.BlobCount) {
		return nil, false
	}
	return o.BlobCount, true
}

// HasBlobCount returns a boolean if a field has been set.
func (o *RunBlobGarbageCollector200Response) HasBlobCount() bool {
	if o != nil && !IsNil(o.BlobCount) {
		return true
	}

	return false
}

// SetBlobCount gets a reference to the given int32 and assigns it to the BlobCount field.
func (o *RunBlobGarbageCollector200Response) SetBlobCount(v int32) {
	o.BlobCount = &v
}

// GetBloomFilterAssociatedProbability returns the BloomFilterAssociatedProbability field value if set, zero value otherwise.
func (o *RunBlobGarbageCollector200Response) GetBloomFilterAssociatedProbability() float64 {
	if o == nil || IsNil(o.BloomFilterAssociatedProbability) {
		var ret float64
		return ret
	}
	return *o.BloomFilterAssociatedProbability
}

// GetBloomFilterAssociatedProbabilityOk returns a tuple with the BloomFilterAssociatedProbability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunBlobGarbageCollector200Response) GetBloomFilterAssociatedProbabilityOk() (*float64, bool) {
	if o == nil || IsNil(o.BloomFilterAssociatedProbability) {
		return nil, false
	}
	return o.BloomFilterAssociatedProbability, true
}

// HasBloomFilterAssociatedProbability returns a boolean if a field has been set.
func (o *RunBlobGarbageCollector200Response) HasBloomFilterAssociatedProbability() bool {
	if o != nil && !IsNil(o.BloomFilterAssociatedProbability) {
		return true
	}

	return false
}

// SetBloomFilterAssociatedProbability gets a reference to the given float64 and assigns it to the BloomFilterAssociatedProbability field.
func (o *RunBlobGarbageCollector200Response) SetBloomFilterAssociatedProbability(v float64) {
	o.BloomFilterAssociatedProbability = &v
}

// GetBloomFilterExpectedBlobCount returns the BloomFilterExpectedBlobCount field value if set, zero value otherwise.
func (o *RunBlobGarbageCollector200Response) GetBloomFilterExpectedBlobCount() int32 {
	if o == nil || IsNil(o.BloomFilterExpectedBlobCount) {
		var ret int32
		return ret
	}
	return *o.BloomFilterExpectedBlobCount
}

// GetBloomFilterExpectedBlobCountOk returns a tuple with the BloomFilterExpectedBlobCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunBlobGarbageCollector200Response) GetBloomFilterExpectedBlobCountOk() (*int32, bool) {
	if o == nil || IsNil(o.BloomFilterExpectedBlobCount) {
		return nil, false
	}
	return o.BloomFilterExpectedBlobCount, true
}

// HasBloomFilterExpectedBlobCount returns a boolean if a field has been set.
func (o *RunBlobGarbageCollector200Response) HasBloomFilterExpectedBlobCount() bool {
	if o != nil && !IsNil(o.BloomFilterExpectedBlobCount) {
		return true
	}

	return false
}

// SetBloomFilterExpectedBlobCount gets a reference to the given int32 and assigns it to the BloomFilterExpectedBlobCount field.
func (o *RunBlobGarbageCollector200Response) SetBloomFilterExpectedBlobCount(v int32) {
	o.BloomFilterExpectedBlobCount = &v
}

// GetGcedBlobCount returns the GcedBlobCount field value if set, zero value otherwise.
func (o *RunBlobGarbageCollector200Response) GetGcedBlobCount() int32 {
	if o == nil || IsNil(o.GcedBlobCount) {
		var ret int32
		return ret
	}
	return *o.GcedBlobCount
}

// GetGcedBlobCountOk returns a tuple with the GcedBlobCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunBlobGarbageCollector200Response) GetGcedBlobCountOk() (*int32, bool) {
	if o == nil || IsNil(o.GcedBlobCount) {
		return nil, false
	}
	return o.GcedBlobCount, true
}

// HasGcedBlobCount returns a boolean if a field has been set.
func (o *RunBlobGarbageCollector200Response) HasGcedBlobCount() bool {
	if o != nil && !IsNil(o.GcedBlobCount) {
		return true
	}

	return false
}

// SetGcedBlobCount gets a reference to the given int32 and assigns it to the GcedBlobCount field.
func (o *RunBlobGarbageCollector200Response) SetGcedBlobCount(v int32) {
	o.GcedBlobCount = &v
}

// GetReferenceSourceCount returns the ReferenceSourceCount field value if set, zero value otherwise.
func (o *RunBlobGarbageCollector200Response) GetReferenceSourceCount() int32 {
	if o == nil || IsNil(o.ReferenceSourceCount) {
		var ret int32
		return ret
	}
	return *o.ReferenceSourceCount
}

// GetReferenceSourceCountOk returns a tuple with the ReferenceSourceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunBlobGarbageCollector200Response) GetReferenceSourceCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ReferenceSourceCount) {
		return nil, false
	}
	return o.ReferenceSourceCount, true
}

// HasReferenceSourceCount returns a boolean if a field has been set.
func (o *RunBlobGarbageCollector200Response) HasReferenceSourceCount() bool {
	if o != nil && !IsNil(o.ReferenceSourceCount) {
		return true
	}

	return false
}

// SetReferenceSourceCount gets a reference to the given int32 and assigns it to the ReferenceSourceCount field.
func (o *RunBlobGarbageCollector200Response) SetReferenceSourceCount(v int32) {
	o.ReferenceSourceCount = &v
}

func (o RunBlobGarbageCollector200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunBlobGarbageCollector200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlobCount) {
		toSerialize["blobCount"] = o.BlobCount
	}
	if !IsNil(o.BloomFilterAssociatedProbability) {
		toSerialize["bloomFilterAssociatedProbability"] = o.BloomFilterAssociatedProbability
	}
	if !IsNil(o.BloomFilterExpectedBlobCount) {
		toSerialize["bloomFilterExpectedBlobCount"] = o.BloomFilterExpectedBlobCount
	}
	if !IsNil(o.GcedBlobCount) {
		toSerialize["gcedBlobCount"] = o.GcedBlobCount
	}
	if !IsNil(o.ReferenceSourceCount) {
		toSerialize["referenceSourceCount"] = o.ReferenceSourceCount
	}
	return toSerialize, nil
}

type NullableRunBlobGarbageCollector200Response struct {
	value *RunBlobGarbageCollector200Response
	isSet bool
}

func (v NullableRunBlobGarbageCollector200Response) Get() *RunBlobGarbageCollector200Response {
	return v.value
}

func (v *NullableRunBlobGarbageCollector200Response) Set(val *RunBlobGarbageCollector200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableRunBlobGarbageCollector200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableRunBlobGarbageCollector200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunBlobGarbageCollector200Response(val *RunBlobGarbageCollector200Response) *NullableRunBlobGarbageCollector200Response {
	return &NullableRunBlobGarbageCollector200Response{value: val, isSet: true}
}

func (v NullableRunBlobGarbageCollector200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunBlobGarbageCollector200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


