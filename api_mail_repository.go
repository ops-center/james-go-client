/*
Apache JAMES Web Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MailRepositoryAPIService MailRepositoryAPI service
type MailRepositoryAPIService service

type ApiCreateMailRepositoryRequest struct {
	ctx context.Context
	ApiService *MailRepositoryAPIService
	encodedPathOfTheRepository string
	protocol *string
}

// Protocol of the mail repository
func (r ApiCreateMailRepositoryRequest) Protocol(protocol string) ApiCreateMailRepositoryRequest {
	r.protocol = &protocol
	return r
}

func (r ApiCreateMailRepositoryRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateMailRepositoryExecute(r)
}

/*
CreateMailRepository Create a mail repository

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param encodedPathOfTheRepository Encoded resource path of the created mail repository
 @return ApiCreateMailRepositoryRequest
*/
func (a *MailRepositoryAPIService) CreateMailRepository(ctx context.Context, encodedPathOfTheRepository string) ApiCreateMailRepositoryRequest {
	return ApiCreateMailRepositoryRequest{
		ApiService: a,
		ctx: ctx,
		encodedPathOfTheRepository: encodedPathOfTheRepository,
	}
}

// Execute executes the request
func (a *MailRepositoryAPIService) CreateMailRepositoryExecute(r ApiCreateMailRepositoryRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MailRepositoryAPIService.CreateMailRepository")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/mailRepositories/{encodedPathOfTheRepository}"
	localVarPath = strings.Replace(localVarPath, "{"+"encodedPathOfTheRepository"+"}", url.PathEscape(parameterValueToString(r.encodedPathOfTheRepository, "encodedPathOfTheRepository")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.protocol == nil {
		return nil, reportError("protocol is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "protocol", r.protocol, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMailRepositoryRequest struct {
	ctx context.Context
	ApiService *MailRepositoryAPIService
	encodedPathOfTheRepository string
}

func (r ApiGetMailRepositoryRequest) Execute() (*GetMailRepository200Response, *http.Response, error) {
	return r.ApiService.GetMailRepositoryExecute(r)
}

/*
GetMailRepository Getting additional information for a mail repository

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param encodedPathOfTheRepository Encoded resource path of an existing mail repository
 @return ApiGetMailRepositoryRequest
*/
func (a *MailRepositoryAPIService) GetMailRepository(ctx context.Context, encodedPathOfTheRepository string) ApiGetMailRepositoryRequest {
	return ApiGetMailRepositoryRequest{
		ApiService: a,
		ctx: ctx,
		encodedPathOfTheRepository: encodedPathOfTheRepository,
	}
}

// Execute executes the request
//  @return GetMailRepository200Response
func (a *MailRepositoryAPIService) GetMailRepositoryExecute(r ApiGetMailRepositoryRequest) (*GetMailRepository200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetMailRepository200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MailRepositoryAPIService.GetMailRepository")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/mailRepositories/{encodedPathOfTheRepository}"
	localVarPath = strings.Replace(localVarPath, "{"+"encodedPathOfTheRepository"+"}", url.PathEscape(parameterValueToString(r.encodedPathOfTheRepository, "encodedPathOfTheRepository")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListMailRepositoriesRequest struct {
	ctx context.Context
	ApiService *MailRepositoryAPIService
}

func (r ApiListMailRepositoriesRequest) Execute() ([]ListMailRepositories200ResponseInner, *http.Response, error) {
	return r.ApiService.ListMailRepositoriesExecute(r)
}

/*
ListMailRepositories Listing mail repositories

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListMailRepositoriesRequest
*/
func (a *MailRepositoryAPIService) ListMailRepositories(ctx context.Context) ApiListMailRepositoriesRequest {
	return ApiListMailRepositoriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ListMailRepositories200ResponseInner
func (a *MailRepositoryAPIService) ListMailRepositoriesExecute(r ApiListMailRepositoriesRequest) ([]ListMailRepositories200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ListMailRepositories200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MailRepositoryAPIService.ListMailRepositories")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/mailRepositories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListMailsInMailRepositoryRequest struct {
	ctx context.Context
	ApiService *MailRepositoryAPIService
	encodedPathOfTheRepository string
	limit *int32
	offset *int32
}

// Limit the number of returned elements
func (r ApiListMailsInMailRepositoryRequest) Limit(limit int32) ApiListMailsInMailRepositoryRequest {
	r.limit = &limit
	return r
}

// Skip the specified number of elements
func (r ApiListMailsInMailRepositoryRequest) Offset(offset int32) ApiListMailsInMailRepositoryRequest {
	r.offset = &offset
	return r
}

func (r ApiListMailsInMailRepositoryRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.ListMailsInMailRepositoryExecute(r)
}

/*
ListMailsInMailRepository Listing mails contained in a mail repository

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param encodedPathOfTheRepository Encoded resource path of an existing mail repository
 @return ApiListMailsInMailRepositoryRequest
*/
func (a *MailRepositoryAPIService) ListMailsInMailRepository(ctx context.Context, encodedPathOfTheRepository string) ApiListMailsInMailRepositoryRequest {
	return ApiListMailsInMailRepositoryRequest{
		ApiService: a,
		ctx: ctx,
		encodedPathOfTheRepository: encodedPathOfTheRepository,
	}
}

// Execute executes the request
//  @return []string
func (a *MailRepositoryAPIService) ListMailsInMailRepositoryExecute(r ApiListMailsInMailRepositoryRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MailRepositoryAPIService.ListMailsInMailRepository")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/mailRepositories/{encodedPathOfTheRepository}/mails"
	localVarPath = strings.Replace(localVarPath, "{"+"encodedPathOfTheRepository"+"}", url.PathEscape(parameterValueToString(r.encodedPathOfTheRepository, "encodedPathOfTheRepository")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
