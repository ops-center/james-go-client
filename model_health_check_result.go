/*
Apache JAMES Web Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HealthCheckResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HealthCheckResult{}

// HealthCheckResult struct for HealthCheckResult
type HealthCheckResult struct {
	Cause NullableString `json:"cause,omitempty"`
	ComponentName *string `json:"componentName,omitempty"`
	EscapedComponentName *string `json:"escapedComponentName,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewHealthCheckResult instantiates a new HealthCheckResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthCheckResult() *HealthCheckResult {
	this := HealthCheckResult{}
	return &this
}

// NewHealthCheckResultWithDefaults instantiates a new HealthCheckResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthCheckResultWithDefaults() *HealthCheckResult {
	this := HealthCheckResult{}
	return &this
}

// GetCause returns the Cause field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthCheckResult) GetCause() string {
	if o == nil || IsNil(o.Cause.Get()) {
		var ret string
		return ret
	}
	return *o.Cause.Get()
}

// GetCauseOk returns a tuple with the Cause field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthCheckResult) GetCauseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cause.Get(), o.Cause.IsSet()
}

// HasCause returns a boolean if a field has been set.
func (o *HealthCheckResult) HasCause() bool {
	if o != nil && o.Cause.IsSet() {
		return true
	}

	return false
}

// SetCause gets a reference to the given NullableString and assigns it to the Cause field.
func (o *HealthCheckResult) SetCause(v string) {
	o.Cause.Set(&v)
}
// SetCauseNil sets the value for Cause to be an explicit nil
func (o *HealthCheckResult) SetCauseNil() {
	o.Cause.Set(nil)
}

// UnsetCause ensures that no value is present for Cause, not even an explicit nil
func (o *HealthCheckResult) UnsetCause() {
	o.Cause.Unset()
}

// GetComponentName returns the ComponentName field value if set, zero value otherwise.
func (o *HealthCheckResult) GetComponentName() string {
	if o == nil || IsNil(o.ComponentName) {
		var ret string
		return ret
	}
	return *o.ComponentName
}

// GetComponentNameOk returns a tuple with the ComponentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthCheckResult) GetComponentNameOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentName) {
		return nil, false
	}
	return o.ComponentName, true
}

// HasComponentName returns a boolean if a field has been set.
func (o *HealthCheckResult) HasComponentName() bool {
	if o != nil && !IsNil(o.ComponentName) {
		return true
	}

	return false
}

// SetComponentName gets a reference to the given string and assigns it to the ComponentName field.
func (o *HealthCheckResult) SetComponentName(v string) {
	o.ComponentName = &v
}

// GetEscapedComponentName returns the EscapedComponentName field value if set, zero value otherwise.
func (o *HealthCheckResult) GetEscapedComponentName() string {
	if o == nil || IsNil(o.EscapedComponentName) {
		var ret string
		return ret
	}
	return *o.EscapedComponentName
}

// GetEscapedComponentNameOk returns a tuple with the EscapedComponentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthCheckResult) GetEscapedComponentNameOk() (*string, bool) {
	if o == nil || IsNil(o.EscapedComponentName) {
		return nil, false
	}
	return o.EscapedComponentName, true
}

// HasEscapedComponentName returns a boolean if a field has been set.
func (o *HealthCheckResult) HasEscapedComponentName() bool {
	if o != nil && !IsNil(o.EscapedComponentName) {
		return true
	}

	return false
}

// SetEscapedComponentName gets a reference to the given string and assigns it to the EscapedComponentName field.
func (o *HealthCheckResult) SetEscapedComponentName(v string) {
	o.EscapedComponentName = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *HealthCheckResult) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthCheckResult) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *HealthCheckResult) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *HealthCheckResult) SetStatus(v string) {
	o.Status = &v
}

func (o HealthCheckResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HealthCheckResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Cause.IsSet() {
		toSerialize["cause"] = o.Cause.Get()
	}
	if !IsNil(o.ComponentName) {
		toSerialize["componentName"] = o.ComponentName
	}
	if !IsNil(o.EscapedComponentName) {
		toSerialize["escapedComponentName"] = o.EscapedComponentName
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableHealthCheckResult struct {
	value *HealthCheckResult
	isSet bool
}

func (v NullableHealthCheckResult) Get() *HealthCheckResult {
	return v.value
}

func (v *NullableHealthCheckResult) Set(val *HealthCheckResult) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthCheckResult) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthCheckResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthCheckResult(val *HealthCheckResult) *NullableHealthCheckResult {
	return &NullableHealthCheckResult{value: val, isSet: true}
}

func (v NullableHealthCheckResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthCheckResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


