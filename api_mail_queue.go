/*
Apache JAMES Web Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MailQueueAPIService MailQueueAPI service
type MailQueueAPIService service

type ApiDeleteMailsOfMailQueueRequest struct {
	ctx context.Context
	ApiService *MailQueueAPIService
	mailQueueName string
	sender *string
	name *string
	recipient *string
}

// Sender mail address
func (r ApiDeleteMailsOfMailQueueRequest) Sender(sender string) ApiDeleteMailsOfMailQueueRequest {
	r.sender = &sender
	return r
}

// Mail name
func (r ApiDeleteMailsOfMailQueueRequest) Name(name string) ApiDeleteMailsOfMailQueueRequest {
	r.name = &name
	return r
}

// Recipient mail address
func (r ApiDeleteMailsOfMailQueueRequest) Recipient(recipient string) ApiDeleteMailsOfMailQueueRequest {
	r.recipient = &recipient
	return r
}

func (r ApiDeleteMailsOfMailQueueRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMailsOfMailQueueExecute(r)
}

/*
DeleteMailsOfMailQueue Delete mails from a mail queue

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mailQueueName Name of the mail queue
 @return ApiDeleteMailsOfMailQueueRequest
*/
func (a *MailQueueAPIService) DeleteMailsOfMailQueue(ctx context.Context, mailQueueName string) ApiDeleteMailsOfMailQueueRequest {
	return ApiDeleteMailsOfMailQueueRequest{
		ApiService: a,
		ctx: ctx,
		mailQueueName: mailQueueName,
	}
}

// Execute executes the request
func (a *MailQueueAPIService) DeleteMailsOfMailQueueExecute(r ApiDeleteMailsOfMailQueueRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MailQueueAPIService.DeleteMailsOfMailQueue")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/mailQueues/{mailQueueName}/mails"
	localVarPath = strings.Replace(localVarPath, "{"+"mailQueueName"+"}", url.PathEscape(parameterValueToString(r.mailQueueName, "mailQueueName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sender != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sender", r.sender, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.recipient != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recipient", r.recipient, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiFlushMailsOfMailQueueRequest struct {
	ctx context.Context
	ApiService *MailQueueAPIService
	mailQueueName string
	flushMailsOfMailQueueRequest *FlushMailsOfMailQueueRequest
}

func (r ApiFlushMailsOfMailQueueRequest) FlushMailsOfMailQueueRequest(flushMailsOfMailQueueRequest FlushMailsOfMailQueueRequest) ApiFlushMailsOfMailQueueRequest {
	r.flushMailsOfMailQueueRequest = &flushMailsOfMailQueueRequest
	return r
}

func (r ApiFlushMailsOfMailQueueRequest) Execute() (*http.Response, error) {
	return r.ApiService.FlushMailsOfMailQueueExecute(r)
}

/*
FlushMailsOfMailQueue Flush mails from a mail queue

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mailQueueName Name of the mail queue
 @return ApiFlushMailsOfMailQueueRequest
*/
func (a *MailQueueAPIService) FlushMailsOfMailQueue(ctx context.Context, mailQueueName string) ApiFlushMailsOfMailQueueRequest {
	return ApiFlushMailsOfMailQueueRequest{
		ApiService: a,
		ctx: ctx,
		mailQueueName: mailQueueName,
	}
}

// Execute executes the request
func (a *MailQueueAPIService) FlushMailsOfMailQueueExecute(r ApiFlushMailsOfMailQueueRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MailQueueAPIService.FlushMailsOfMailQueue")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/mailQueues/{mailQueueName}"
	localVarPath = strings.Replace(localVarPath, "{"+"mailQueueName"+"}", url.PathEscape(parameterValueToString(r.mailQueueName, "mailQueueName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.flushMailsOfMailQueueRequest == nil {
		return nil, reportError("flushMailsOfMailQueueRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.flushMailsOfMailQueueRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListMailQueuesRequest struct {
	ctx context.Context
	ApiService *MailQueueAPIService
}

func (r ApiListMailQueuesRequest) Execute() (*http.Response, error) {
	return r.ApiService.ListMailQueuesExecute(r)
}

/*
ListMailQueues List mail queues

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListMailQueuesRequest
*/
func (a *MailQueueAPIService) ListMailQueues(ctx context.Context) ApiListMailQueuesRequest {
	return ApiListMailQueuesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MailQueueAPIService) ListMailQueuesExecute(r ApiListMailQueuesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MailQueueAPIService.ListMailQueues")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/mailQueues"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListMailsOfMailQueueRequest struct {
	ctx context.Context
	ApiService *MailQueueAPIService
	mailQueueName string
	limit *int32
}

// Maximum number of mails returned in a single call
func (r ApiListMailsOfMailQueueRequest) Limit(limit int32) ApiListMailsOfMailQueueRequest {
	r.limit = &limit
	return r
}

func (r ApiListMailsOfMailQueueRequest) Execute() ([]ListMailsOfMailQueue200ResponseInner, *http.Response, error) {
	return r.ApiService.ListMailsOfMailQueueExecute(r)
}

/*
ListMailsOfMailQueue List mails of a mail queue

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mailQueueName Name of the mail queue
 @return ApiListMailsOfMailQueueRequest
*/
func (a *MailQueueAPIService) ListMailsOfMailQueue(ctx context.Context, mailQueueName string) ApiListMailsOfMailQueueRequest {
	return ApiListMailsOfMailQueueRequest{
		ApiService: a,
		ctx: ctx,
		mailQueueName: mailQueueName,
	}
}

// Execute executes the request
//  @return []ListMailsOfMailQueue200ResponseInner
func (a *MailQueueAPIService) ListMailsOfMailQueueExecute(r ApiListMailsOfMailQueueRequest) ([]ListMailsOfMailQueue200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ListMailsOfMailQueue200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MailQueueAPIService.ListMailsOfMailQueue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/mailQueues/{mailQueueName}/mails"
	localVarPath = strings.Replace(localVarPath, "{"+"mailQueueName"+"}", url.PathEscape(parameterValueToString(r.mailQueueName, "mailQueueName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRepublishMailQueueRequest struct {
	ctx context.Context
	ApiService *MailQueueAPIService
	action *string
	olderThan *string
}

// Republish action (RepublishNotProcessedMails)
func (r ApiRepublishMailQueueRequest) Action(action string) ApiRepublishMailQueueRequest {
	r.action = &action
	return r
}

// Older than duration (e.g., 5h, 7d, 1y)
func (r ApiRepublishMailQueueRequest) OlderThan(olderThan string) ApiRepublishMailQueueRequest {
	r.olderThan = &olderThan
	return r
}

func (r ApiRepublishMailQueueRequest) Execute() (*http.Response, error) {
	return r.ApiService.RepublishMailQueueExecute(r)
}

/*
RepublishMailQueue RabbitMQ republishing a mail queue from Cassandra

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRepublishMailQueueRequest
*/
func (a *MailQueueAPIService) RepublishMailQueue(ctx context.Context) ApiRepublishMailQueueRequest {
	return ApiRepublishMailQueueRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MailQueueAPIService) RepublishMailQueueExecute(r ApiRepublishMailQueueRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MailQueueAPIService.RepublishMailQueue")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/mailQueues"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.action == nil {
		return nil, reportError("action is required and must be specified")
	}
	if r.olderThan == nil {
		return nil, reportError("olderThan is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "action", r.action, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "olderThan", r.olderThan, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
