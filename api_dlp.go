/*
Apache JAMES Web Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DlpAPIService DlpAPI service
type DlpAPIService service

type ApiFetchDLPConfigurationRequest struct {
	ctx context.Context
	ApiService *DlpAPIService
	senderDomain string
	ruleId string
}

func (r ApiFetchDLPConfigurationRequest) Execute() (*http.Response, error) {
	return r.ApiService.FetchDLPConfigurationExecute(r)
}

/*
FetchDLPConfiguration Fetch a DLP configuration item by sender domain and rule id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param senderDomain
 @param ruleId
 @return ApiFetchDLPConfigurationRequest
*/
func (a *DlpAPIService) FetchDLPConfiguration(ctx context.Context, senderDomain string, ruleId string) ApiFetchDLPConfigurationRequest {
	return ApiFetchDLPConfigurationRequest{
		ApiService: a,
		ctx: ctx,
		senderDomain: senderDomain,
		ruleId: ruleId,
	}
}

// Execute executes the request
func (a *DlpAPIService) FetchDLPConfigurationExecute(r ApiFetchDLPConfigurationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlpAPIService.FetchDLPConfiguration")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dlp/rules/{senderDomain}/rules/{ruleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"senderDomain"+"}", url.PathEscape(parameterValueToString(r.senderDomain, "senderDomain")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ruleId"+"}", url.PathEscape(parameterValueToString(r.ruleId, "ruleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListDLPConfigurationRequest struct {
	ctx context.Context
	ApiService *DlpAPIService
	senderDomain string
}

func (r ApiListDLPConfigurationRequest) Execute() (*http.Response, error) {
	return r.ApiService.ListDLPConfigurationExecute(r)
}

/*
ListDLPConfiguration List DLP configuration by sender domain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param senderDomain
 @return ApiListDLPConfigurationRequest
*/
func (a *DlpAPIService) ListDLPConfiguration(ctx context.Context, senderDomain string) ApiListDLPConfigurationRequest {
	return ApiListDLPConfigurationRequest{
		ApiService: a,
		ctx: ctx,
		senderDomain: senderDomain,
	}
}

// Execute executes the request
func (a *DlpAPIService) ListDLPConfigurationExecute(r ApiListDLPConfigurationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlpAPIService.ListDLPConfiguration")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dlp/rules/{senderDomain}"
	localVarPath = strings.Replace(localVarPath, "{"+"senderDomain"+"}", url.PathEscape(parameterValueToString(r.senderDomain, "senderDomain")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRemoveDLPConfigurationRequest struct {
	ctx context.Context
	ApiService *DlpAPIService
	senderDomain string
}

func (r ApiRemoveDLPConfigurationRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveDLPConfigurationExecute(r)
}

/*
RemoveDLPConfiguration Remove DLP configuration by sender domain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param senderDomain
 @return ApiRemoveDLPConfigurationRequest
*/
func (a *DlpAPIService) RemoveDLPConfiguration(ctx context.Context, senderDomain string) ApiRemoveDLPConfigurationRequest {
	return ApiRemoveDLPConfigurationRequest{
		ApiService: a,
		ctx: ctx,
		senderDomain: senderDomain,
	}
}

// Execute executes the request
func (a *DlpAPIService) RemoveDLPConfigurationExecute(r ApiRemoveDLPConfigurationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlpAPIService.RemoveDLPConfiguration")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dlp/rules/{senderDomain}"
	localVarPath = strings.Replace(localVarPath, "{"+"senderDomain"+"}", url.PathEscape(parameterValueToString(r.senderDomain, "senderDomain")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiStoreDLPConfigurationRequest struct {
	ctx context.Context
	ApiService *DlpAPIService
	senderDomain string
	storeDLPConfigurationRequest *StoreDLPConfigurationRequest
}

func (r ApiStoreDLPConfigurationRequest) StoreDLPConfigurationRequest(storeDLPConfigurationRequest StoreDLPConfigurationRequest) ApiStoreDLPConfigurationRequest {
	r.storeDLPConfigurationRequest = &storeDLPConfigurationRequest
	return r
}

func (r ApiStoreDLPConfigurationRequest) Execute() (*http.Response, error) {
	return r.ApiService.StoreDLPConfigurationExecute(r)
}

/*
StoreDLPConfiguration Store DLP configuration by sender domain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param senderDomain
 @return ApiStoreDLPConfigurationRequest
*/
func (a *DlpAPIService) StoreDLPConfiguration(ctx context.Context, senderDomain string) ApiStoreDLPConfigurationRequest {
	return ApiStoreDLPConfigurationRequest{
		ApiService: a,
		ctx: ctx,
		senderDomain: senderDomain,
	}
}

// Execute executes the request
func (a *DlpAPIService) StoreDLPConfigurationExecute(r ApiStoreDLPConfigurationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlpAPIService.StoreDLPConfiguration")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dlp/rules/{senderDomain}"
	localVarPath = strings.Replace(localVarPath, "{"+"senderDomain"+"}", url.PathEscape(parameterValueToString(r.senderDomain, "senderDomain")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.storeDLPConfigurationRequest == nil {
		return nil, reportError("storeDLPConfigurationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.storeDLPConfigurationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
