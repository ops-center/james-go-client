/*
Apache JAMES Web Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DomainQuotaAPIService DomainQuotaAPI service
type DomainQuotaAPIService service

type ApiDeleteDomainQuotaCountRequest struct {
	ctx context.Context
	ApiService *DomainQuotaAPIService
	domainToBeUsed string
}

func (r ApiDeleteDomainQuotaCountRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDomainQuotaCountExecute(r)
}

/*
DeleteDomainQuotaCount Delete the quota count for a domain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param domainToBeUsed
 @return ApiDeleteDomainQuotaCountRequest
*/
func (a *DomainQuotaAPIService) DeleteDomainQuotaCount(ctx context.Context, domainToBeUsed string) ApiDeleteDomainQuotaCountRequest {
	return ApiDeleteDomainQuotaCountRequest{
		ApiService: a,
		ctx: ctx,
		domainToBeUsed: domainToBeUsed,
	}
}

// Execute executes the request
func (a *DomainQuotaAPIService) DeleteDomainQuotaCountExecute(r ApiDeleteDomainQuotaCountRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainQuotaAPIService.DeleteDomainQuotaCount")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/quota/domains/{domainToBeUsed}/count"
	localVarPath = strings.Replace(localVarPath, "{"+"domainToBeUsed"+"}", url.PathEscape(parameterValueToString(r.domainToBeUsed, "domainToBeUsed")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteDomainQuotaSizeRequest struct {
	ctx context.Context
	ApiService *DomainQuotaAPIService
	domainToBeUsed string
}

func (r ApiDeleteDomainQuotaSizeRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDomainQuotaSizeExecute(r)
}

/*
DeleteDomainQuotaSize Delete the quota size for a domain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param domainToBeUsed
 @return ApiDeleteDomainQuotaSizeRequest
*/
func (a *DomainQuotaAPIService) DeleteDomainQuotaSize(ctx context.Context, domainToBeUsed string) ApiDeleteDomainQuotaSizeRequest {
	return ApiDeleteDomainQuotaSizeRequest{
		ApiService: a,
		ctx: ctx,
		domainToBeUsed: domainToBeUsed,
	}
}

// Execute executes the request
func (a *DomainQuotaAPIService) DeleteDomainQuotaSizeExecute(r ApiDeleteDomainQuotaSizeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainQuotaAPIService.DeleteDomainQuotaSize")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/quota/domains/{domainToBeUsed}/size"
	localVarPath = strings.Replace(localVarPath, "{"+"domainToBeUsed"+"}", url.PathEscape(parameterValueToString(r.domainToBeUsed, "domainToBeUsed")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDomainQuotaRequest struct {
	ctx context.Context
	ApiService *DomainQuotaAPIService
	domainToBeUsed string
}

func (r ApiGetDomainQuotaRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetDomainQuotaExecute(r)
}

/*
GetDomainQuota Get the quota for a domain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param domainToBeUsed
 @return ApiGetDomainQuotaRequest
*/
func (a *DomainQuotaAPIService) GetDomainQuota(ctx context.Context, domainToBeUsed string) ApiGetDomainQuotaRequest {
	return ApiGetDomainQuotaRequest{
		ApiService: a,
		ctx: ctx,
		domainToBeUsed: domainToBeUsed,
	}
}

// Execute executes the request
func (a *DomainQuotaAPIService) GetDomainQuotaExecute(r ApiGetDomainQuotaRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainQuotaAPIService.GetDomainQuota")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/quota/domains/{domainToBeUsed}"
	localVarPath = strings.Replace(localVarPath, "{"+"domainToBeUsed"+"}", url.PathEscape(parameterValueToString(r.domainToBeUsed, "domainToBeUsed")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDomainQuotaCountRequest struct {
	ctx context.Context
	ApiService *DomainQuotaAPIService
	domainToBeUsed string
}

func (r ApiGetDomainQuotaCountRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetDomainQuotaCountExecute(r)
}

/*
GetDomainQuotaCount Get the quota count for a domain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param domainToBeUsed
 @return ApiGetDomainQuotaCountRequest
*/
func (a *DomainQuotaAPIService) GetDomainQuotaCount(ctx context.Context, domainToBeUsed string) ApiGetDomainQuotaCountRequest {
	return ApiGetDomainQuotaCountRequest{
		ApiService: a,
		ctx: ctx,
		domainToBeUsed: domainToBeUsed,
	}
}

// Execute executes the request
func (a *DomainQuotaAPIService) GetDomainQuotaCountExecute(r ApiGetDomainQuotaCountRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainQuotaAPIService.GetDomainQuotaCount")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/quota/domains/{domainToBeUsed}/count"
	localVarPath = strings.Replace(localVarPath, "{"+"domainToBeUsed"+"}", url.PathEscape(parameterValueToString(r.domainToBeUsed, "domainToBeUsed")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDomainQuotaSizeRequest struct {
	ctx context.Context
	ApiService *DomainQuotaAPIService
	domainToBeUsed string
}

func (r ApiGetDomainQuotaSizeRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetDomainQuotaSizeExecute(r)
}

/*
GetDomainQuotaSize Get the quota size for a domain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param domainToBeUsed
 @return ApiGetDomainQuotaSizeRequest
*/
func (a *DomainQuotaAPIService) GetDomainQuotaSize(ctx context.Context, domainToBeUsed string) ApiGetDomainQuotaSizeRequest {
	return ApiGetDomainQuotaSizeRequest{
		ApiService: a,
		ctx: ctx,
		domainToBeUsed: domainToBeUsed,
	}
}

// Execute executes the request
func (a *DomainQuotaAPIService) GetDomainQuotaSizeExecute(r ApiGetDomainQuotaSizeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainQuotaAPIService.GetDomainQuotaSize")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/quota/domains/{domainToBeUsed}/size"
	localVarPath = strings.Replace(localVarPath, "{"+"domainToBeUsed"+"}", url.PathEscape(parameterValueToString(r.domainToBeUsed, "domainToBeUsed")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateDomainQuotaRequest struct {
	ctx context.Context
	ApiService *DomainQuotaAPIService
	domainToBeUsed string
	updateGlobalQuotaRequest *UpdateGlobalQuotaRequest
}

// The new quota for the domain
func (r ApiUpdateDomainQuotaRequest) UpdateGlobalQuotaRequest(updateGlobalQuotaRequest UpdateGlobalQuotaRequest) ApiUpdateDomainQuotaRequest {
	r.updateGlobalQuotaRequest = &updateGlobalQuotaRequest
	return r
}

func (r ApiUpdateDomainQuotaRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateDomainQuotaExecute(r)
}

/*
UpdateDomainQuota Update the quota for a domain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param domainToBeUsed
 @return ApiUpdateDomainQuotaRequest
*/
func (a *DomainQuotaAPIService) UpdateDomainQuota(ctx context.Context, domainToBeUsed string) ApiUpdateDomainQuotaRequest {
	return ApiUpdateDomainQuotaRequest{
		ApiService: a,
		ctx: ctx,
		domainToBeUsed: domainToBeUsed,
	}
}

// Execute executes the request
func (a *DomainQuotaAPIService) UpdateDomainQuotaExecute(r ApiUpdateDomainQuotaRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainQuotaAPIService.UpdateDomainQuota")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/quota/domains/{domainToBeUsed}"
	localVarPath = strings.Replace(localVarPath, "{"+"domainToBeUsed"+"}", url.PathEscape(parameterValueToString(r.domainToBeUsed, "domainToBeUsed")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateGlobalQuotaRequest == nil {
		return nil, reportError("updateGlobalQuotaRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateGlobalQuotaRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateDomainQuotaCountRequest struct {
	ctx context.Context
	ApiService *DomainQuotaAPIService
	domainToBeUsed string
	body *int32
}

// The new quota count for the domain
func (r ApiUpdateDomainQuotaCountRequest) Body(body int32) ApiUpdateDomainQuotaCountRequest {
	r.body = &body
	return r
}

func (r ApiUpdateDomainQuotaCountRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateDomainQuotaCountExecute(r)
}

/*
UpdateDomainQuotaCount Update the quota count for a domain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param domainToBeUsed
 @return ApiUpdateDomainQuotaCountRequest
*/
func (a *DomainQuotaAPIService) UpdateDomainQuotaCount(ctx context.Context, domainToBeUsed string) ApiUpdateDomainQuotaCountRequest {
	return ApiUpdateDomainQuotaCountRequest{
		ApiService: a,
		ctx: ctx,
		domainToBeUsed: domainToBeUsed,
	}
}

// Execute executes the request
func (a *DomainQuotaAPIService) UpdateDomainQuotaCountExecute(r ApiUpdateDomainQuotaCountRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainQuotaAPIService.UpdateDomainQuotaCount")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/quota/domains/{domainToBeUsed}/count"
	localVarPath = strings.Replace(localVarPath, "{"+"domainToBeUsed"+"}", url.PathEscape(parameterValueToString(r.domainToBeUsed, "domainToBeUsed")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}
	if *r.body < -1 {
		return nil, reportError("body must be greater than -1")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateDomainQuotaSizeRequest struct {
	ctx context.Context
	ApiService *DomainQuotaAPIService
	domainToBeUsed string
	body *int32
}

// The new quota size for the domain
func (r ApiUpdateDomainQuotaSizeRequest) Body(body int32) ApiUpdateDomainQuotaSizeRequest {
	r.body = &body
	return r
}

func (r ApiUpdateDomainQuotaSizeRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateDomainQuotaSizeExecute(r)
}

/*
UpdateDomainQuotaSize Update the quota size for a domain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param domainToBeUsed
 @return ApiUpdateDomainQuotaSizeRequest
*/
func (a *DomainQuotaAPIService) UpdateDomainQuotaSize(ctx context.Context, domainToBeUsed string) ApiUpdateDomainQuotaSizeRequest {
	return ApiUpdateDomainQuotaSizeRequest{
		ApiService: a,
		ctx: ctx,
		domainToBeUsed: domainToBeUsed,
	}
}

// Execute executes the request
func (a *DomainQuotaAPIService) UpdateDomainQuotaSizeExecute(r ApiUpdateDomainQuotaSizeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainQuotaAPIService.UpdateDomainQuotaSize")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/quota/domains/{domainToBeUsed}/size"
	localVarPath = strings.Replace(localVarPath, "{"+"domainToBeUsed"+"}", url.PathEscape(parameterValueToString(r.domainToBeUsed, "domainToBeUsed")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}
	if *r.body < -1 {
		return nil, reportError("body must be greater than -1")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
