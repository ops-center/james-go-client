/*
Apache JAMES Web Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetLatestAvailableSchemaVersion200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetLatestAvailableSchemaVersion200Response{}

// GetLatestAvailableSchemaVersion200Response struct for GetLatestAvailableSchemaVersion200Response
type GetLatestAvailableSchemaVersion200Response struct {
	Version *int32 `json:"version,omitempty"`
}

// NewGetLatestAvailableSchemaVersion200Response instantiates a new GetLatestAvailableSchemaVersion200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetLatestAvailableSchemaVersion200Response() *GetLatestAvailableSchemaVersion200Response {
	this := GetLatestAvailableSchemaVersion200Response{}
	return &this
}

// NewGetLatestAvailableSchemaVersion200ResponseWithDefaults instantiates a new GetLatestAvailableSchemaVersion200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetLatestAvailableSchemaVersion200ResponseWithDefaults() *GetLatestAvailableSchemaVersion200Response {
	this := GetLatestAvailableSchemaVersion200Response{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *GetLatestAvailableSchemaVersion200Response) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLatestAvailableSchemaVersion200Response) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *GetLatestAvailableSchemaVersion200Response) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *GetLatestAvailableSchemaVersion200Response) SetVersion(v int32) {
	o.Version = &v
}

func (o GetLatestAvailableSchemaVersion200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetLatestAvailableSchemaVersion200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableGetLatestAvailableSchemaVersion200Response struct {
	value *GetLatestAvailableSchemaVersion200Response
	isSet bool
}

func (v NullableGetLatestAvailableSchemaVersion200Response) Get() *GetLatestAvailableSchemaVersion200Response {
	return v.value
}

func (v *NullableGetLatestAvailableSchemaVersion200Response) Set(val *GetLatestAvailableSchemaVersion200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetLatestAvailableSchemaVersion200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetLatestAvailableSchemaVersion200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetLatestAvailableSchemaVersion200Response(val *GetLatestAvailableSchemaVersion200Response) *NullableGetLatestAvailableSchemaVersion200Response {
	return &NullableGetLatestAvailableSchemaVersion200Response{value: val, isSet: true}
}

func (v NullableGetLatestAvailableSchemaVersion200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetLatestAvailableSchemaVersion200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


