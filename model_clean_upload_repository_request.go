/*
Apache JAMES Web Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CleanUploadRepositoryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CleanUploadRepositoryRequest{}

// CleanUploadRepositoryRequest struct for CleanUploadRepositoryRequest
type CleanUploadRepositoryRequest struct {
	// Specifies the scope of cleanup (e.g., \"expired\" uploads)
	Scope *string `json:"scope,omitempty"`
	// Timestamp of the task creation
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// Type of the task
	Type *string `json:"type,omitempty"`
}

// NewCleanUploadRepositoryRequest instantiates a new CleanUploadRepositoryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCleanUploadRepositoryRequest() *CleanUploadRepositoryRequest {
	this := CleanUploadRepositoryRequest{}
	return &this
}

// NewCleanUploadRepositoryRequestWithDefaults instantiates a new CleanUploadRepositoryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCleanUploadRepositoryRequestWithDefaults() *CleanUploadRepositoryRequest {
	this := CleanUploadRepositoryRequest{}
	return &this
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *CleanUploadRepositoryRequest) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CleanUploadRepositoryRequest) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *CleanUploadRepositoryRequest) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *CleanUploadRepositoryRequest) SetScope(v string) {
	o.Scope = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *CleanUploadRepositoryRequest) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CleanUploadRepositoryRequest) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *CleanUploadRepositoryRequest) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *CleanUploadRepositoryRequest) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CleanUploadRepositoryRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CleanUploadRepositoryRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CleanUploadRepositoryRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CleanUploadRepositoryRequest) SetType(v string) {
	o.Type = &v
}

func (o CleanUploadRepositoryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CleanUploadRepositoryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableCleanUploadRepositoryRequest struct {
	value *CleanUploadRepositoryRequest
	isSet bool
}

func (v NullableCleanUploadRepositoryRequest) Get() *CleanUploadRepositoryRequest {
	return v.value
}

func (v *NullableCleanUploadRepositoryRequest) Set(val *CleanUploadRepositoryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCleanUploadRepositoryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCleanUploadRepositoryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCleanUploadRepositoryRequest(val *CleanUploadRepositoryRequest) *NullableCleanUploadRepositoryRequest {
	return &NullableCleanUploadRepositoryRequest{value: val, isSet: true}
}

func (v NullableCleanUploadRepositoryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCleanUploadRepositoryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


