/*
Apache JAMES Web Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AddressMappingAPIService AddressMappingAPI service
type AddressMappingAPIService service

type ApiAddAddressMappingRequest struct {
	ctx context.Context
	ApiService *AddressMappingAPIService
	mappingSource string
	destinationAddress string
}

func (r ApiAddAddressMappingRequest) Execute() (*http.Response, error) {
	return r.ApiService.AddAddressMappingExecute(r)
}

/*
AddAddressMapping Add an address mapping

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mappingSource Mapping source (recipient address)
 @param destinationAddress Mapping destination (address)
 @return ApiAddAddressMappingRequest
*/
func (a *AddressMappingAPIService) AddAddressMapping(ctx context.Context, mappingSource string, destinationAddress string) ApiAddAddressMappingRequest {
	return ApiAddAddressMappingRequest{
		ApiService: a,
		ctx: ctx,
		mappingSource: mappingSource,
		destinationAddress: destinationAddress,
	}
}

// Execute executes the request
func (a *AddressMappingAPIService) AddAddressMappingExecute(r ApiAddAddressMappingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressMappingAPIService.AddAddressMapping")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/mappings"
	localVarPath = strings.Replace(localVarPath, "{"+"mappingSource"+"}", url.PathEscape(parameterValueToString(r.mappingSource, "mappingSource")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"destinationAddress"+"}", url.PathEscape(parameterValueToString(r.destinationAddress, "destinationAddress")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListAddressMappingsRequest struct {
	ctx context.Context
	ApiService *AddressMappingAPIService
}

func (r ApiListAddressMappingsRequest) Execute() (*ListAddressMappings200Response, *http.Response, error) {
	return r.ApiService.ListAddressMappingsExecute(r)
}

/*
ListAddressMappings List all address mappings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListAddressMappingsRequest
*/
func (a *AddressMappingAPIService) ListAddressMappings(ctx context.Context) ApiListAddressMappingsRequest {
	return ApiListAddressMappingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListAddressMappings200Response
func (a *AddressMappingAPIService) ListAddressMappingsExecute(r ApiListAddressMappingsRequest) (*ListAddressMappings200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListAddressMappings200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressMappingAPIService.ListAddressMappings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/mappings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveAddressMappingRequest struct {
	ctx context.Context
	ApiService *AddressMappingAPIService
	mappingSource string
	destinationAddress string
}

func (r ApiRemoveAddressMappingRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveAddressMappingExecute(r)
}

/*
RemoveAddressMapping Remove an address mapping

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mappingSource Mapping source (recipient address)
 @param destinationAddress Mapping destination (address)
 @return ApiRemoveAddressMappingRequest
*/
func (a *AddressMappingAPIService) RemoveAddressMapping(ctx context.Context, mappingSource string, destinationAddress string) ApiRemoveAddressMappingRequest {
	return ApiRemoveAddressMappingRequest{
		ApiService: a,
		ctx: ctx,
		mappingSource: mappingSource,
		destinationAddress: destinationAddress,
	}
}

// Execute executes the request
func (a *AddressMappingAPIService) RemoveAddressMappingExecute(r ApiRemoveAddressMappingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressMappingAPIService.RemoveAddressMapping")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/mappings/address/{mappingSource}/targets/{destinationAddress}"
	localVarPath = strings.Replace(localVarPath, "{"+"mappingSource"+"}", url.PathEscape(parameterValueToString(r.mappingSource, "mappingSource")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"destinationAddress"+"}", url.PathEscape(parameterValueToString(r.destinationAddress, "destinationAddress")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
