/*
Apache JAMES Web Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DomainAlias type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DomainAlias{}

// DomainAlias struct for DomainAlias
type DomainAlias struct {
	// Source domain alias
	Source *string `json:"source,omitempty"`
}

// NewDomainAlias instantiates a new DomainAlias object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainAlias() *DomainAlias {
	this := DomainAlias{}
	return &this
}

// NewDomainAliasWithDefaults instantiates a new DomainAlias object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainAliasWithDefaults() *DomainAlias {
	this := DomainAlias{}
	return &this
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *DomainAlias) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainAlias) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *DomainAlias) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *DomainAlias) SetSource(v string) {
	o.Source = &v
}

func (o DomainAlias) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DomainAlias) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	return toSerialize, nil
}

type NullableDomainAlias struct {
	value *DomainAlias
	isSet bool
}

func (v NullableDomainAlias) Get() *DomainAlias {
	return v.value
}

func (v *NullableDomainAlias) Set(val *DomainAlias) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainAlias) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainAlias) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainAlias(val *DomainAlias) *NullableDomainAlias {
	return &NullableDomainAlias{value: val, isSet: true}
}

func (v NullableDomainAlias) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainAlias) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


