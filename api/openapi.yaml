openapi: 3.0.1
info:
  title: Apache JAMES Web Admin API
  version: 3.8.0
servers:
- url: /
paths:
  /address/aliases:
    get:
      operationId: listAliases
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  example: "[\"user1@domain.com\",\"user2@domain.com\"]"
                  format: email
                  type: string
                type: array
          description: Success
      summary: List users with aliases
      tags:
      - address-alias
  /address/aliases/{userAddress}:
    delete:
      operationId: deleteAlias
      parameters:
      - description: User mail address
        example: user@domain.com
        explode: false
        in: path
        name: userAddress
        required: true
        schema:
          format: email
          type: string
        style: simple
      - description: Alias source mail address
        example: alias@domain.com
        explode: true
        in: query
        name: sourceAddress
        required: true
        schema:
          format: email
          type: string
        style: form
      responses:
        "204":
          description: OK
        "400":
          description: Alias structure or member is not valid
      summary: Remove an alias from a user
      tags:
      - address-alias
    get:
      operationId: getAlias
      parameters:
      - description: User mail address
        example: user@domain.com
        explode: false
        in: path
        name: userAddress
        required: true
        schema:
          format: email
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/getAlias_200_response_inner'
                type: array
          description: Success
        "400":
          description: Alias structure is not valid
      summary: List alias sources of a user
      tags:
      - address-alias
    put:
      operationId: createAlias
      parameters:
      - description: User mail address
        example: user@domain.com
        explode: false
        in: path
        name: userAddress
        required: true
        schema:
          format: email
          type: string
        style: simple
      - description: Alias source mail address
        example: alias@domain.com
        explode: true
        in: query
        name: sourceAddress
        required: true
        schema:
          format: email
          type: string
        style: form
      responses:
        "204":
          description: OK
        "400":
          description: |
            Alias structure or member is not valid
            Source and destination cannot be the same
            Domain in the destination or source is not managed by the DomainList
        "409":
          description: |
            The alias source already exists as a user
            The creation of the alias would lead to a loop and cannot be performed
      summary: Add a new alias to a user
      tags:
      - address-alias
  /address/forwards:
    get:
      operationId: listForwards
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  example: "[\"user1@domain.com\",\"user2@domain.com\"]"
                  format: email
                  type: string
                type: array
          description: Success
      summary: List address forwards
      tags:
      - address-forward
  /address/forwards/{userAddress}:
    delete:
      operationId: deleteDestination
      parameters:
      - description: User mail address
        example: user@domain.com
        explode: false
        in: path
        name: userAddress
        required: true
        schema:
          format: email
          type: string
        style: simple
      - description: Destination mail address
        example: destination@domain.com
        explode: true
        in: query
        name: destinationAddress
        required: true
        schema:
          format: email
          type: string
        style: form
      responses:
        "204":
          description: Success
        "400":
          description: Forward structure or member is not valid
      summary: Remove a destination from a forward
      tags:
      - address-forward
    get:
      operationId: listDestinations
      parameters:
      - description: User mail address
        example: user@domain.com
        explode: false
        in: path
        name: userAddress
        required: true
        schema:
          format: email
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/listDestinations_200_response_inner'
                type: array
          description: Success
        "400":
          description: Forward structure is not valid
        "404":
          description: The user doesn't have any forwards or does not exist
      summary: List destinations in a forward
      tags:
      - address-forward
    put:
      operationId: addDestination
      parameters:
      - description: User mail address
        example: user@domain.com
        explode: false
        in: path
        name: userAddress
        required: true
        schema:
          format: email
          type: string
        style: simple
      - description: Destination mail address
        example: destination@domain.com
        explode: true
        in: query
        name: destinationAddress
        required: true
        schema:
          format: email
          type: string
        style: form
      responses:
        "204":
          description: Success
        "400":
          description: |
            Forward structure or member is not valid
            Domain in the source is not managed by the DomainList
        "404":
          description: Requested forward address does not match an existing user
        "409":
          description: The creation of the forward would lead to a loop and cannot
            be performed
      summary: Add a new destination to a forward
      tags:
      - address-forward
  /address/groups:
    get:
      operationId: listGroups
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  example: "[\"group1@domain.com\",\"group2@domain.com\"]"
                  format: email
                  type: string
                type: array
          description: Success
      summary: List address groups
      tags:
      - address-group
  /address/groups/{groupAddress}:
    delete:
      operationId: removeMember
      parameters:
      - description: Group mail address
        example: group@domain.com
        explode: false
        in: path
        name: groupAddress
        required: true
        schema:
          format: email
          type: string
        style: simple
      - description: Member mail address
        example: member@domain.com
        explode: true
        in: query
        name: memberAddress
        required: true
        schema:
          format: email
          type: string
        style: form
      responses:
        "204":
          description: Success
        "400":
          description: Group structure or member is not valid
      summary: Remove a group member
      tags:
      - address-group
    get:
      operationId: listMembers
      parameters:
      - description: Group mail address
        example: group@domain.com
        explode: false
        in: path
        name: groupAddress
        required: true
        schema:
          format: email
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  example: "[\"member1@domain.com\",\"member2@domain.com\"]"
                  format: email
                  type: string
                type: array
          description: Success
        "400":
          description: Group structure is not valid
        "404":
          description: The group does not exist
      summary: List members of a group
      tags:
      - address-group
    put:
      operationId: addMember
      parameters:
      - description: Group mail address
        example: group@domain.com
        explode: false
        in: path
        name: groupAddress
        required: true
        schema:
          format: email
          type: string
        style: simple
      - description: Member mail address
        example: member@domain.com
        explode: true
        in: query
        name: memberAddress
        required: true
        schema:
          format: email
          type: string
        style: form
      responses:
        "204":
          description: Success
        "400":
          description: Group structure or member is not valid
        "409":
          description: Requested group address is already used for another purpose
            or would cause a loop
      summary: Add a group member
      tags:
      - address-group
  /blobs:
    delete:
      operationId: runBlobGarbageCollector
      parameters:
      - description: "Specifies the scope of garbage collection (e.g., \"unreferenced\"\
          \ blobs)"
        explode: true
        in: query
        name: scope
        required: true
        schema:
          enum:
          - unreferenced
          type: string
        style: form
      - explode: true
        in: query
        name: associatedProbability
        required: false
        schema:
          default: 0.01
          description: Targeted false positive rate for the bloom filter
          format: double
          maximum: 1
          minimum: 0
          type: number
        style: form
      - explode: true
        in: query
        name: expectedBlobCount
        required: false
        schema:
          default: 1000000
          description: Expected count of blobs used to size the bloom filters
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runBlobGarbageCollector_200_response'
          description: Blob garbage collection task created
      summary: Run blob garbage collection
      tags:
      - garbage-collection
  /cassandra/mailbox/merging:
    post:
      operationId: correctGhostMailbox
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/correctGhostMailbox_request'
        description: Parameters for merging mailboxes
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/correctGhostMailbox_201_response'
          description: Task generation succeeded. Corresponding task ID is returned
        "400":
          description: Unable to parse the request body.
      summary: Correct ghost mailbox by merging
      tags:
      - ghost-mailbox
  /cassandra/mappings:
    post:
      operationId: performActionOnCassandraMappings
      parameters:
      - description: The action to perform on mappings_sources table
        explode: true
        in: query
        name: action
        required: true
        schema:
          type: string
        style: form
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/performActionOnCassandraMappings_201_response'
          description: Task ID of the created task
        "400":
          description: Invalid action argument for performing operation on mappings
            data
      summary: Perform an action on mappings_sources table
      tags:
      - cassandra-extra
  /cassandra/version:
    get:
      operationId: getSchemaVersion
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSchemaVersion_200_response'
          description: Success. The current Cassandra schema version is returned
      summary: Retrieve current Cassandra schema version
      tags:
      - cassandra-schema-upgrade
  /cassandra/version/latest:
    get:
      operationId: getLatestAvailableSchemaVersion
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getLatestAvailableSchemaVersion_200_response'
          description: Success. The latest available Cassandra schema version is returned
      summary: Retrieve latest available Cassandra schema version
      tags:
      - cassandra-schema-upgrade
  /cassandra/version/upgrade:
    post:
      operationId: upgradeSchemaVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/getLatestAvailableSchemaVersion_200_response'
        description: The target schema version to upgrade to
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/upgradeSchemaVersion_200_response'
          description: Success. The migration task has been scheduled
        "400":
          description: The version is invalid. The version should be a strictly positive
            number.
        "410":
          description: Error while planning this migration. This resource is gone
            away. Reason is mentioned in the body.
      summary: Upgrade to a specific Cassandra schema version
      tags:
      - cassandra-schema-upgrade
  /cassandra/version/upgrade/latest:
    post:
      operationId: upgradeToLatestSchemaVersion
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/upgradeToLatestSchemaVersion_200_response'
          description: Success. The migration task has been scheduled
        "410":
          description: Error while planning this migration. This resource is gone
            away. Reason is mentioned in the body.
      summary: Upgrade to the latest Cassandra schema version
      tags:
      - cassandra-schema-upgrade
  /deletedMessages:
    delete:
      operationId: purgeMessages
      parameters:
      - description: The scope of messages to purge
        explode: true
        in: query
        name: scope
        required: true
        schema:
          enum:
          - expired
          type: string
        style: form
      responses:
        "201":
          description: Task for purging expired messages has been created
        "400":
          description: Bad request. Invalid parameters
        "404":
          description: User not found
      summary: Purge all expired deleted messages
      tags:
      - deleted-message-vault
  /deletedMessages/users/{user}/actions/export:
    post:
      operationId: exportDeletedMessages
      parameters:
      - description: The user to export deleted messages from
        explode: false
        in: path
        name: user
        required: true
        schema:
          type: string
        style: simple
      - description: The email address to export the messages to
        explode: true
        in: query
        name: exportTo
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exportDeletedMessages_request'
        required: true
      responses:
        "201":
          description: Task for exporting deleted messages has been created
        "400":
          description: Bad request. Invalid parameters or JSON body
        "404":
          description: User not found
      summary: Export deleted messages for a specific user
      tags:
      - deleted-message-vault
  /deletedMessages/users/{user}/actions/restore:
    post:
      operationId: restoreDeletedMessages
      parameters:
      - description: The user to restore deleted messages for
        explode: false
        in: path
        name: user
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exportDeletedMessages_request'
        required: true
      responses:
        "201":
          description: Task for restoring deleted messages has been created
        "400":
          description: Bad request. Invalid parameters or JSON body
        "404":
          description: User not found
      summary: Restore deleted messages for a specific user
      tags:
      - deleted-message-vault
  /deletedMessages/users/{user}/messages/{messageId}:
    delete:
      operationId: purgeMessage
      parameters:
      - description: The user of the deleted message
        explode: false
        in: path
        name: user
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the deleted message
        explode: false
        in: path
        name: messageId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          description: Task for deleting the message has been created
        "400":
          description: Bad request. Invalid parameters
        "404":
          description: User not found
      summary: Permanently remove a deleted message
      tags:
      - deleted-message-vault
  /dlp/rules/{senderDomain}:
    delete:
      operationId: removeDLPConfiguration
      parameters:
      - explode: false
        in: path
        name: senderDomain
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: DLP configuration is removed
        "400":
          description: Invalid senderDomain or payload in request
        "404":
          description: The domain does not exist
      summary: Remove DLP configuration by sender domain
      tags:
      - dlp
    get:
      operationId: listDLPConfiguration
      parameters:
      - explode: false
        in: path
        name: senderDomain
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: List of DLP configuration items
        "400":
          description: Invalid senderDomain or payload in request
        "404":
          description: The domain does not exist
      summary: List DLP configuration by sender domain
      tags:
      - dlp
    put:
      operationId: storeDLPConfiguration
      parameters:
      - explode: false
        in: path
        name: senderDomain
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/storeDLPConfiguration_request'
        required: true
      responses:
        "204":
          description: List of DLP configuration items is stored
        "400":
          description: Invalid senderDomain or payload in request
        "404":
          description: The domain does not exist
      summary: Store DLP configuration by sender domain
      tags:
      - dlp
  /dlp/rules/{senderDomain}/rules/{ruleId}:
    get:
      operationId: fetchDLPConfiguration
      parameters:
      - explode: false
        in: path
        name: senderDomain
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: ruleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: A DLP configuration item is returned
        "400":
          description: Invalid senderDomain or payload in request
        "404":
          description: The domain and/or the rule does not exist
      summary: Fetch a DLP configuration item by sender domain and rule id
      tags:
      - dlp
  /domainMappings:
    delete:
      operationId: removeDomainMapping
      requestBody:
        content:
          text/plain:
            schema:
              example: destination.tld
              format: hostname
              type: string
        required: true
      responses:
        "204":
          description: OK
        "400":
          description: |
            The fromDomain resource name is invalid
            The destination domain specified in the body is invalid
      summary: Remove a domain mapping
      tags:
      - domain-mapping
    get:
      operationId: listDomainMappings
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  items:
                    example: "[\"firstDestination.com\",\"secondDestination.net\"]"
                    format: hostname
                    type: string
                  type: array
                type: object
          description: OK
      summary: List all domain mappings
      tags:
      - domain-mapping
    put:
      operationId: addDomainMapping
      requestBody:
        content:
          text/plain:
            schema:
              example: destination.tld
              format: hostname
              type: string
        required: true
      responses:
        "204":
          description: OK
        "400":
          description: |
            The fromDomain resource name is invalid
            The destination domain specified in the body is invalid
      summary: Add a domain mapping
      tags:
      - domain-mapping
  /domainMappings/{fromDomain}:
    get:
      operationId: listDestinationDomains
      parameters:
      - description: Source domain name
        example: sourceDomain.tld
        explode: false
        in: path
        name: fromDomain
        required: true
        schema:
          format: hostname
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  example: "[\"firstDestination.com\",\"secondDestination.com\"]"
                  format: hostname
                  type: string
                type: array
          description: OK
        "400":
          description: The fromDomain resource name is invalid
        "404":
          description: The fromDomain resource name is not found
      summary: List all destination domains for a source domain
      tags:
      - domain-mapping
  /domains:
    get:
      operationId: listDomains
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: The domain list was successfully retrieved
      summary: Get the list of domains
      tags:
      - domains
  /domains/{domainName}:
    get:
      operationId: existsDomain
      parameters:
      - description: Name of the domain to be tested
        explode: false
        in: path
        name: domainName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The domain exists
        "404":
          description: The domain does not exist
      summary: Test if a domain exists
      tags:
      - domains
  /domains/{domainName}/aliases:
    delete:
      operationId: deleteDomainAlias
      parameters:
      - description: Name of the destination domain for the alias
        explode: false
        in: path
        name: domainName
        required: true
        schema:
          type: string
        style: simple
      - description: Name of the source domain for the alias
        explode: true
        in: query
        name: sourceDomainName
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: The redirection now no longer exists
        "400":
          description: source.domain.tld or destination.domain.tld have an invalid
            syntax
        "404":
          description: source.domain.tld is not part of handled domains
      summary: Delete an alias for a domain
      tags:
      - domains
    get:
      operationId: listDomainAliases
      parameters:
      - description: Name of the domain to retrieve aliases for
        explode: false
        in: path
        name: domainName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DomainAlias'
                type: array
          description: The domain aliases were successfully retrieved
        "400":
          description: destination.domain.tld has an invalid syntax
        "404":
          description: destination.domain.tld is not part of handled domains and does
            not have local domains as aliases.
      summary: Get the list of aliases for a domain
      tags:
      - domains
    put:
      operationId: createDomainAlias
      parameters:
      - description: Name of the destination domain for the alias
        explode: false
        in: path
        name: domainName
        required: true
        schema:
          type: string
        style: simple
      - description: Name of the source domain for the alias
        explode: true
        in: query
        name: sourceDomainName
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: The redirection now exists
        "400":
          description: source.domain.tld or destination.domain.tld have an invalid
            syntax
        "404":
          description: source.domain.tld is not part of handled domains
      summary: Create an alias for a domain
      tags:
      - domains
  /domains/{domainToBeCreated}:
    put:
      operationId: createDomain
      parameters:
      - description: Name of the domain to be created
        explode: false
        in: path
        name: domainToBeCreated
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The domain was successfully added
        "400":
          description: The domain name is invalid
      summary: Create a domain
      tags:
      - domains
  /domains/{domainToBeDeleted}:
    delete:
      operationId: deleteDomain
      parameters:
      - description: Name of the domain to be deleted
        explode: false
        in: path
        name: domainToBeDeleted
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The domain was successfully removed
      summary: Delete a domain
      tags:
      - domains
  /domains/{domainToBeUsed}:
    post:
      operationId: deleteUserDataOfDomain
      parameters:
      - description: Name of the domain to delete user data from
        explode: false
        in: path
        name: domainToBeUsed
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/deleteUserDataOfDomain_request'
      responses:
        "201":
          description: Success. Corresponding task id is returned
        "400":
          description: Error in the request. Details can be found in the reported
            error
      summary: Delete all users data of a domain
      tags:
      - domains
  /events/deadLetter/groups:
    get:
      operationId: listMailboxListenerGroups
      responses:
        "200":
          content:
            application/json:
              example:
              - org.apache.james.mailbox.events.EventBusTestFixture$GroupA
              - org.apache.james.mailbox.events.GenericGroup-abc
              schema:
                items:
                  type: string
                type: array
          description: Success. A list of group names is returned.
      summary: List Mailbox Listener Groups
      tags:
      - event-dead-letter
    post:
      operationId: redeliverAllEvents
      responses:
        "201":
          description: Task created successfully. The taskId of the created task is
            returned.
        "400":
          description: Invalid action argument
      summary: Redeliver all events
      tags:
      - event-dead-letter
  /events/deadLetter/groups/{groupName}:
    delete:
      operationId: deleteAllEvents
      parameters:
      - description: The name of the mailbox listener group
        explode: false
        in: path
        name: groupName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "400":
          description: Invalid group name
      summary: Delete all events of a group
      tags:
      - event-dead-letter
    get:
      operationId: listFailedEvents
      parameters:
      - description: The name of the mailbox listener group
        explode: false
        in: path
        name: groupName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Success. A list of insertion ids is returned.
        "400":
          description: Invalid group name
      summary: List failed events for a given group
      tags:
      - event-dead-letter
  /events/deadLetter/groups/{groupName}/{insertionId}:
    delete:
      operationId: deleteEvent
      parameters:
      - description: The name of the mailbox listener group
        explode: false
        in: path
        name: groupName
        required: true
        schema:
          type: string
        style: simple
      - description: The insertion ID of the event
        explode: false
        in: path
        name: insertionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "400":
          description: Invalid group name or insertionId
      summary: Delete an event
      tags:
      - event-dead-letter
    get:
      operationId: getEvent
      parameters:
      - description: The name of the mailbox listener group
        explode: false
        in: path
        name: groupName
        required: true
        schema:
          type: string
        style: simple
      - description: The insertion ID of the event
        explode: false
        in: path
        name: insertionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success. A JSON representing this event is returned.
        "400":
          description: Invalid group name or insertionId
        "404":
          description: No event with this insertionId
      summary: Get event details
      tags:
      - event-dead-letter
  /events/deadLetter/groups/{groupName}/{insertionId}/reDeliver:
    post:
      operationId: redeliverEvent
      parameters:
      - description: The name of the mailbox listener group
        explode: false
        in: path
        name: groupName
        required: true
        schema:
          type: string
        style: simple
      - description: The insertion ID of the event
        explode: false
        in: path
        name: insertionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          description: Task created successfully. The taskId of the created task is
            returned.
        "400":
          description: "Invalid group name, insertion id, or action argument"
        "404":
          description: No event with this insertionId
      summary: Redeliver a single event
      tags:
      - event-dead-letter
  /events/deadLetter/groups/{groupName}/reDeliver:
    post:
      operationId: redeliverGroupEvents
      parameters:
      - description: The name of the mailbox listener group
        explode: false
        in: path
        name: groupName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          description: Task created successfully. The taskId of the created task is
            returned.
        "400":
          description: Invalid group name or action argument
      summary: Redeliver group events
      tags:
      - event-dead-letter
  /healthcheck:
    get:
      operationId: checkAllComponents
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/checkAllComponents_200_response'
          description: Health check results
      summary: Check all components
      tags:
      - healthcheck
  /healthcheck/checks:
    get:
      operationId: listAllHealthChecks
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/HealthCheckInfo'
                type: array
          description: List of available health checks
      summary: List all health checks
      tags:
      - healthcheck
  /healthcheck/checks/{componentName}:
    get:
      operationId: checkComponent
      parameters:
      - description: URL encoded name of the component
        explode: false
        in: path
        name: componentName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResult'
          description: Health check result for the component
        "404":
          description: Component not found
        "503":
          description: Unhealthy status for the component
      summary: Check single component
      tags:
      - healthcheck
  /jmap/uploads:
    delete:
      operationId: cleanUploadRepository
      parameters:
      - description: "Specifies the scope of cleanup (e.g., \"expired\" uploads)"
        explode: true
        in: query
        name: scope
        required: true
        schema:
          enum:
          - expired
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cleanUploadRepository_request'
        description: Task details
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cleanUploadRepository_201_response'
          description: Task scheduled successfully
        "400":
          description: Invalid scope parameter value
      summary: Clean upload repository
      tags:
      - jmap-uploads
  /mail-transfer-service:
    post:
      operationId: sendEmail
      requestBody:
        content:
          message/rfc822:
            schema:
              description: MIME message representing the email
              type: string
        required: true
      responses:
        "200":
          description: Email sent successfully
        "400":
          description: Invalid request
      summary: Send email
      tags:
      - send-mail
  /mailQueues:
    get:
      operationId: listMailQueues
      responses:
        "200":
          content:
            application/json:
              example: "[\"outgoing\",\"spool\"]"
          description: List of mail queues
      summary: List mail queues
      tags:
      - mail-queue
    post:
      operationId: republishMailQueue
      parameters:
      - description: Republish action (RepublishNotProcessedMails)
        explode: true
        in: query
        name: action
        required: true
        schema:
          type: string
        style: form
      - description: "Older than duration (e.g., 5h, 7d, 1y)"
        explode: true
        in: query
        name: olderThan
        required: true
        schema:
          type: string
        style: form
      responses:
        "201":
          content:
            application/json:
              example:
                taskId: a650a66a-5984-431e-bdad-f1baad885856
          description: Task created
        "400":
          description: Invalid request
      summary: RabbitMQ republishing a mail queue from Cassandra
      tags:
      - mail-queue
  /mailQueues/{mailQueueName}:
    patch:
      operationId: flushMailsOfMailQueue
      parameters:
      - description: Name of the mail queue
        explode: false
        in: path
        name: mailQueueName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/flushMailsOfMailQueue_request'
        required: true
      responses:
        "204":
          description: Success (No content)
        "400":
          description: Invalid request
        "404":
          description: Mail queue does not exist
      summary: Flush mails from a mail queue
      tags:
      - mail-queue
  /mailQueues/{mailQueueName}/mails:
    delete:
      operationId: deleteMailsOfMailQueue
      parameters:
      - description: Name of the mail queue
        explode: false
        in: path
        name: mailQueueName
        required: true
        schema:
          type: string
        style: simple
      - description: Sender mail address
        explode: true
        in: query
        name: sender
        required: false
        schema:
          type: string
        style: form
      - description: Mail name
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: Recipient mail address
        explode: true
        in: query
        name: recipient
        required: false
        schema:
          type: string
        style: form
      responses:
        "201":
          content:
            application/json:
              example:
                taskId: a650a66a-5984-431e-bdad-f1baad885856
          description: Task generation succeeded. Corresponding task id is returned.
        "400":
          description: Invalid request
        "404":
          description: Mail queue does not exist
      summary: Delete mails from a mail queue
      tags:
      - mail-queue
    get:
      operationId: listMailsOfMailQueue
      parameters:
      - description: Name of the mail queue
        explode: false
        in: path
        name: mailQueueName
        required: true
        schema:
          type: string
        style: simple
      - description: Maximum number of mails returned in a single call
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/listMailsOfMailQueue_200_response_inner'
                type: array
          description: List of mails
        "400":
          description: Mail queue is not valid or limit is invalid
        "404":
          description: Mail queue does not exist
      summary: List mails of a mail queue
      tags:
      - mail-queue
  /mailRepositories:
    get:
      operationId: listMailRepositories
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - path: var%2Fmail%2Ferror%2F
                  repository: var/mail/error/
                - path: var%2Fmail%2Frelay-denied%2F
                  repository: var/mail/relay-denied/
                - path: var%2Fmail%2Fspam%2F
                  repository: var/mail/spam/
                - path: var%2Fmail%2Faddress-error%2F
                  repository: var/mail/address-error/
                items:
                  $ref: '#/components/schemas/listMailRepositories_200_response_inner'
                type: array
          description: The list of mail repositories
      summary: Listing mail repositories
      tags:
      - mail-repository
  /mailRepositories/{encodedPathOfTheRepository}:
    get:
      operationId: getMailRepository
      parameters:
      - description: Encoded resource path of an existing mail repository
        explode: false
        in: path
        name: encodedPathOfTheRepository
        required: true
        schema:
          example: var%2Fmail%2Ferror%2F
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getMailRepository_200_response'
          description: Additional information for that repository
        "404":
          description: This repository cannot be found
      summary: Getting additional information for a mail repository
      tags:
      - mail-repository
    put:
      operationId: createMailRepository
      parameters:
      - description: Encoded resource path of the created mail repository
        explode: false
        in: path
        name: encodedPathOfTheRepository
        required: true
        schema:
          example: mailRepo
          type: string
        style: simple
      - description: Protocol of the mail repository
        explode: true
        in: query
        name: protocol
        required: true
        schema:
          example: file
          type: string
        style: form
      responses:
        "204":
          description: The repository is created
      summary: Create a mail repository
      tags:
      - mail-repository
  /mailRepositories/{encodedPathOfTheRepository}/mails:
    get:
      operationId: listMailsInMailRepository
      parameters:
      - description: Encoded resource path of an existing mail repository
        explode: false
        in: path
        name: encodedPathOfTheRepository
        required: true
        schema:
          example: var%2Fmail%2Ferror%2F
          type: string
        style: simple
      - description: Limit the number of returned elements
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: Skip the specified number of elements
        explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - mail-key-1
                - mail-key-2
                - mail-key-3
                items:
                  type: string
                type: array
          description: The list of mail keys contained in that mail repository
        "400":
          description: This repository can not be found
      summary: Listing mails contained in a mail repository
      tags:
      - mail-repository
  /mailboxes:
    post:
      operationId: performActionsOnMailboxes
      parameters:
      - description: Comma-separated list of actions to perform on mailboxes
        explode: true
        in: query
        name: action
        required: true
        schema:
          type: string
        style: form
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/performActionsOnMailboxes_201_response'
          description: Success. Task ID is returned.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error in the request. Details can be found in the reported
            error.
      summary: Perform actions on mailboxes
      tags:
      - mailbox
  /mailboxes/{mailboxId}:
    post:
      operationId: reindexMailbox
      parameters:
      - description: ID of the mailbox to reindex
        explode: false
        in: path
        name: mailboxId
        required: true
        schema:
          type: string
        style: simple
      - description: The reindexing task to perform
        explode: true
        in: query
        name: task
        required: true
        schema:
          type: string
        style: form
      - description: The rate at which messages should be processed per second
        explode: true
        in: query
        name: messagesPerSecond
        required: false
        schema:
          minimum: 1
          type: integer
        style: form
      - description: The reindexing mode used
        explode: true
        in: query
        name: mode
        required: false
        schema:
          enum:
          - rebuildAll
          - rebuildAllNoCleanup
          - fixOutdated
          type: string
        style: form
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/performActionsOnMailboxes_201_response'
          description: Success. Task ID is returned.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error in the request. Details can be found in the reported
            error.
      summary: Reindex a mailbox
      tags:
      - mailbox
  /mailboxes?task=populateFilteringProjection:
    post:
      operationId: recomputeCassandraFilteringProjection
      responses:
        "201":
          description: Success. Corresponding task ID is returned
        "400":
          description: Error in the request. Details can be found in the reported
            error
      summary: Recompute Cassandra filtering projection
      tags:
      - user-mailbox
  /mappings:
    get:
      operationId: listAddressMappings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listAddressMappings_200_response'
          description: OK
      summary: List all address mappings
      tags:
      - address-mapping
    post:
      operationId: addAddressMapping
      parameters:
      - description: Mapping source (recipient address)
        explode: false
        in: path
        name: mappingSource
        required: true
        schema:
          example: alias@domain.tld
          type: string
        style: simple
      - description: Mapping destination (address)
        explode: false
        in: path
        name: destinationAddress
        required: true
        schema:
          example: user@domain.tld
          type: string
        style: simple
      responses:
        "204":
          description: Action successfully performed
        "400":
          description: Invalid parameters
        "409":
          description: The creation of the address mapping would lead to a loop and
            cannot be performed
      summary: Add an address mapping
      tags:
      - address-mapping
  /mappings/address/{mappingSource}/targets/{destinationAddress}:
    delete:
      operationId: removeAddressMapping
      parameters:
      - description: Mapping source (recipient address)
        explode: false
        in: path
        name: mappingSource
        required: true
        schema:
          example: alias@domain.tld
          type: string
        style: simple
      - description: Mapping destination (address)
        explode: false
        in: path
        name: destinationAddress
        required: true
        schema:
          example: user@domain.tld
          type: string
        style: simple
      responses:
        "204":
          description: Action successfully performed
        "400":
          description: Invalid parameters
      summary: Remove an address mapping
      tags:
      - address-mapping
  /mappings/regex/{mappingSource}/targets/{regex}:
    delete:
      operationId: removeRegexMapping
      parameters:
      - description: Mapping source (recipient address)
        explode: false
        in: path
        name: mappingSource
        required: true
        schema:
          example: james@domain.tld
          type: string
        style: simple
      - description: Java Regular Expression (regex)
        explode: false
        in: path
        name: regex
        required: true
        schema:
          example: "[O_O]:james-intern@james.org"
          type: string
        style: simple
      responses:
        "204":
          description: Mapping deleted successfully.
        "400":
          description: |
            Invalid mappingSource path parameter.
            Invalid regex path parameter.
      summary: Remove a regex mapping
      tags:
      - regex-mapping
    post:
      operationId: addRegexMapping
      parameters:
      - description: Mapping source (recipient address)
        explode: false
        in: path
        name: mappingSource
        required: true
        schema:
          example: james@domain.tld
          type: string
        style: simple
      - description: Java Regular Expression (regex)
        explode: false
        in: path
        name: regex
        required: true
        schema:
          example: james@.*:james-intern@james.org
          type: string
        style: simple
      responses:
        "204":
          description: Mapping added successfully.
        "400":
          description: |
            Invalid mappingSource path parameter.
            Invalid regex path parameter.
      summary: Add a regex mapping
      tags:
      - regex-mapping
  /mappings/user/{userAddress}:
    get:
      operationId: listUserMappings
      parameters:
      - description: User address
        explode: false
        in: path
        name: userAddress
        required: true
        schema:
          example: user123@domain.tld
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - mapping: user123@domain.tld
                  type: Address
                - mapping: aliasuser123@domain.tld
                  type: Alias
                - mapping: group123@domain.tld
                  type: Group
                items:
                  $ref: '#/components/schemas/listUserMappings_200_response_inner'
                type: array
          description: OK
        "400":
          description: Invalid parameter value
      summary: Listing User Mappings
      tags:
      - user-mapping
  /messages:
    post:
      operationId: scheduleTask
      parameters:
      - description: Task type for fixing message inconsistencies
        explode: true
        in: query
        name: task
        required: true
        schema:
          type: string
        style: form
      - description: Rate of messages to be processed per second
        explode: true
        in: query
        name: messagesPerSecond
        required: false
        schema:
          minimum: 1
          type: integer
        style: form
      - description: Reindexing mode used
        explode: true
        in: query
        name: mode
        required: false
        schema:
          enum:
          - rebuildAll
          - rebuildAllNoCleanup
          - fixOutdated
          type: string
        style: form
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/performActionsOnMailboxes_201_response'
          description: Success. Task ID is returned.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scheduleTask_400_response'
          description: Error in the request. Details can be found in the reported
            error.
      summary: Schedule a task for fixing message inconsistencies
      tags:
      - messages
  /messages/{messageId}:
    post:
      operationId: reindexEmail
      parameters:
      - description: Implementation-dependent valid messageId
        explode: false
        in: path
        name: messageId
        required: true
        schema:
          type: string
        style: simple
      - description: Task type for reindexing
        explode: true
        in: query
        name: task
        required: true
        schema:
          type: string
        style: form
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/performActionsOnMailboxes_201_response'
          description: Success. Task ID is returned.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scheduleTask_400_response'
          description: Error in the request. Details can be found in the reported
            error.
      summary: Reindex a single mail by messageId
      tags:
      - messages
  /quota:
    get:
      operationId: getGlobalQuota
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getGlobalQuota_200_response'
          description: Success. The global quota details are returned
      summary: Get the global quota
      tags:
      - global-quota
    put:
      operationId: updateGlobalQuota
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateGlobalQuota_request'
        description: The new global quota
        required: true
      responses:
        "204":
          description: The global quota has been updated
        "400":
          description: The body is not a positive integer or an unlimited value (-1)
      summary: Update the global quota
      tags:
      - global-quota
  /quota/count:
    delete:
      operationId: deleteGlobalQuotaCount
      responses:
        "204":
          description: The global quota count has been updated to an unlimited value
      summary: Delete the global quota count
      tags:
      - global-quota
    get:
      operationId: getGlobalQuotaCount
      responses:
        "200":
          content:
            application/json:
              schema:
                example: 52
                type: integer
          description: Success. The global quota count is returned
        "204":
          description: No quota count limit is defined at the global level
      summary: Get the global quota count
      tags:
      - global-quota
    put:
      operationId: updateGlobalQuotaCount
      requestBody:
        content:
          application/json:
            schema:
              example: 52
              minimum: -1
              type: integer
        description: The new global quota count
        required: true
      responses:
        "204":
          description: The global quota count has been updated
        "400":
          description: The body is not a positive integer or an unlimited value (-1)
      summary: Update the global quota count
      tags:
      - global-quota
  /quota/domains/{domainToBeUsed}:
    get:
      operationId: getDomainQuota
      parameters:
      - explode: false
        in: path
        name: domainToBeUsed
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success. The domain's quota details are returned
        "404":
          description: The domain does not exist
        "405":
          description: Domain Quota configuration not supported when virtual hosting
            is deactivated.
      summary: Get the quota for a domain
      tags:
      - domain-quota
    put:
      operationId: updateDomainQuota
      parameters:
      - explode: false
        in: path
        name: domainToBeUsed
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateGlobalQuota_request'
        description: The new quota for the domain
        required: true
      responses:
        "204":
          description: The quota has been updated
        "400":
          description: The body is not a positive integer or an unlimited value (-1)
        "404":
          description: The domain does not exist
        "405":
          description: Domain Quota configuration not supported when virtual hosting
            is deactivated.
      summary: Update the quota for a domain
      tags:
      - domain-quota
  /quota/domains/{domainToBeUsed}/count:
    delete:
      operationId: deleteDomainQuotaCount
      parameters:
      - explode: false
        in: path
        name: domainToBeUsed
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The quota count has been updated to an unlimited value
        "404":
          description: The domain does not exist
        "405":
          description: Domain Quota configuration not supported when virtual hosting
            is deactivated.
      summary: Delete the quota count for a domain
      tags:
      - domain-quota
    get:
      operationId: getDomainQuotaCount
      parameters:
      - explode: false
        in: path
        name: domainToBeUsed
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success. The domain's quota count is returned
        "204":
          description: No quota count limit is defined at the domain level for this
            domain
        "404":
          description: The domain does not exist
        "405":
          description: Domain Quota configuration not supported when virtual hosting
            is deactivated.
      summary: Get the quota count for a domain
      tags:
      - domain-quota
    put:
      operationId: updateDomainQuotaCount
      parameters:
      - explode: false
        in: path
        name: domainToBeUsed
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              example: 52
              minimum: -1
              type: integer
        description: The new quota count for the domain
        required: true
      responses:
        "204":
          description: The quota count has been updated
        "400":
          description: The body is not a positive integer or an unlimited value (-1)
        "404":
          description: The domain does not exist
        "405":
          description: Domain Quota configuration not supported when virtual hosting
            is deactivated.
      summary: Update the quota count for a domain
      tags:
      - domain-quota
  /quota/domains/{domainToBeUsed}/size:
    delete:
      operationId: deleteDomainQuotaSize
      parameters:
      - explode: false
        in: path
        name: domainToBeUsed
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The quota size has been updated to an unlimited value
        "404":
          description: The domain does not exist
        "405":
          description: Domain Quota configuration not supported when virtual hosting
            is deactivated.
      summary: Delete the quota size for a domain
      tags:
      - domain-quota
    get:
      operationId: getDomainQuotaSize
      parameters:
      - explode: false
        in: path
        name: domainToBeUsed
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success. The domain's quota size is returned
        "204":
          description: No quota size limit is defined at the domain level for this
            domain
        "404":
          description: The domain does not exist
        "405":
          description: Domain Quota configuration not supported when virtual hosting
            is deactivated.
      summary: Get the quota size for a domain
      tags:
      - domain-quota
    put:
      operationId: updateDomainQuotaSize
      parameters:
      - explode: false
        in: path
        name: domainToBeUsed
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              example: 52
              minimum: -1
              type: integer
        description: The new quota size for the domain
        required: true
      responses:
        "204":
          description: The quota size has been updated
        "400":
          description: The body is not a positive integer or an unlimited value (-1)
        "404":
          description: The domain does not exist
        "405":
          description: Domain Quota configuration not supported when virtual hosting
            is deactivated.
      summary: Update the quota size for a domain
      tags:
      - domain-quota
  /quota/size:
    delete:
      operationId: deleteGlobalQuotaSize
      responses:
        "204":
          description: The global quota size has been updated to an unlimited value
      summary: Delete the global quota size
      tags:
      - global-quota
    get:
      operationId: getGlobalQuotaSize
      responses:
        "200":
          content:
            application/json:
              schema:
                example: 52
                type: integer
          description: Success. The global quota size is returned
        "204":
          description: No quota size limit is defined at the global level
      summary: Get the global quota size
      tags:
      - global-quota
    put:
      operationId: updateGlobalQuotaSize
      requestBody:
        content:
          application/json:
            schema:
              example: 52
              minimum: -1
              type: integer
        description: The new global quota size
        required: true
      responses:
        "204":
          description: The global quota size has been updated
        "400":
          description: The body is not a positive integer or an unlimited value (-1)
      summary: Update the global quota size
      tags:
      - global-quota
  /quota/users:
    get:
      operationId: searchByQuota
      parameters:
      - description: The minimum occupation ratio of users to be returned
        explode: true
        in: query
        name: minOccupationRatio
        required: false
        schema:
          maximum: 1
          minimum: 0
          type: number
        style: form
      - description: The maximum occupation ratio of users to be returned
        explode: true
        in: query
        name: maxOccupationRatio
        required: false
        schema:
          maximum: 1
          minimum: 0
          type: number
        style: form
      - description: The maximum number of users to be returned
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - description: The number of users to skip
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: integer
        style: form
      - description: The domain of users to be returned
        explode: true
        in: query
        name: domain
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: List of users with quota details
        "400":
          description: Validation issues with parameters
      summary: Search users by quota ratio
      tags:
      - user-quota
    post:
      operationId: recomputeCurrentQuotas
      parameters:
      - explode: true
        in: query
        name: task
        required: true
        schema:
          enum:
          - RecomputeCurrentQuotas
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/recomputeCurrentQuotas_request'
        description: Additional task options
      responses:
        "201":
          description: Success. Corresponding task ID is returned
        "400":
          description: Error in the request. Details can be found in the reported
            error
      summary: Recompute current quotas for users
      tags:
      - user-quota
  /quota/users/{username}:
    get:
      operationId: getQuota
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success. The user's quota details are returned
        "404":
          description: The user does not exist
      summary: Get the quota for a user
      tags:
      - user-quota
    put:
      operationId: updateQuota
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateGlobalQuota_request'
        description: The new quota for the user
        required: true
      responses:
        "204":
          description: The quota has been updated
        "400":
          description: The body is not a positive integer or an unlimited value (-1)
        "404":
          description: The user does not exist
      summary: Update the quota for a user
      tags:
      - user-quota
  /quota/users/{username}/count:
    delete:
      operationId: deleteQuotaCount
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The quota count has been updated to an unlimited value
        "404":
          description: The user does not exist
      summary: Delete the quota count for a user
      tags:
      - user-quota
    get:
      operationId: getQuotaCount
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success. The user's quota count is returned
        "204":
          description: No quota count limit is defined for the user
        "404":
          description: The user does not exist
      summary: Get the quota count for a user
      tags:
      - user-quota
    put:
      operationId: updateQuotaCount
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              example: 52
              minimum: -1
              type: integer
        description: The new quota count for the user
        required: true
      responses:
        "204":
          description: The quota count has been updated
        "400":
          description: The body is not a positive integer or an unlimited value (-1)
        "404":
          description: The user does not exist
      summary: Update the quota count for a user
      tags:
      - user-quota
  /quota/users/{username}/size:
    delete:
      operationId: deleteQuotaSize
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The quota size has been updated to an unlimited value
        "404":
          description: The user does not exist
      summary: Delete the quota size for a user
      tags:
      - user-quota
    get:
      operationId: getQuotaSize
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success. The user's quota size is returned
        "204":
          description: No quota size limit is defined for the user
        "404":
          description: The user does not exist
      summary: Get the quota size for a user
      tags:
      - user-quota
    put:
      operationId: updateQuotaSize
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              example: 42
              minimum: -1
              type: integer
        description: The new quota size for the user
        required: true
      responses:
        "204":
          description: The quota size has been updated
        "400":
          description: The body is not a positive integer or an unlimited value (-1)
        "404":
          description: The user does not exist
      summary: Update the quota size for a user
      tags:
      - user-quota
  /sieve/quota/default:
    delete:
      responses:
        "204":
          description: Operation succeeded
      summary: Remove global sieve quota
      tags:
      - sieve-quota
    get:
      responses:
        "200":
          description: Request is a success and the value is returned
        "204":
          description: No default quota is being configured
      summary: Retrieve global sieve quota
      tags:
      - sieve-quota
    put:
      operationId: updateGlobalSieveQuota
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateGlobalSieveQuota_request'
        required: true
      responses:
        "204":
          description: Operation succeeded
        "400":
          description: Invalid payload
      summary: Update global sieve quota
      tags:
      - sieve-quota
  /sieve/quota/users/{userEmail}:
    delete:
      operationId: removeUserSieveQuota
      parameters:
      - explode: false
        in: path
        name: userEmail
        required: true
        schema:
          format: email
          type: string
        style: simple
      responses:
        "204":
          description: Operation succeeded
      summary: Remove user sieve quota
      tags:
      - sieve-quota
    get:
      operationId: getUserSieveQuota
      parameters:
      - explode: false
        in: path
        name: userEmail
        required: true
        schema:
          format: email
          type: string
        style: simple
      responses:
        "200":
          description: Request is a success and the value is returned
        "204":
          description: No quota is being configured for this user
      summary: Retrieve user sieve quota
      tags:
      - sieve-quota
    put:
      operationId: updateUserSieveQuota
      parameters:
      - explode: false
        in: path
        name: userEmail
        required: true
        schema:
          format: email
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUserSieveQuota_request'
        required: true
      responses:
        "204":
          description: Operation succeeded
        "400":
          description: Invalid payload
      summary: Update user sieve quota
      tags:
      - sieve-quota
  /tasks:
    get:
      operationId: listTasks
      parameters:
      - description: "The status of the tasks (waiting, inProgress, canceledRequested,\
          \ completed, canceled, failed)"
        explode: true
        in: query
        name: status
        required: false
        schema:
          type: string
        style: form
      - description: The type of the tasks
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      - description: Return tasks submitted before this date
        explode: true
        in: query
        name: submittedBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Return tasks submitted after this date
        explode: true
        in: query
        name: submittedAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Return tasks started before this date
        explode: true
        in: query
        name: startedBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Return tasks started after this date
        explode: true
        in: query
        name: startedAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Return tasks completed before this date
        explode: true
        in: query
        name: completedBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Return tasks completed after this date
        explode: true
        in: query
        name: completedAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Return tasks failed before this date
        explode: true
        in: query
        name: failedBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Return tasks failed after this date
        explode: true
        in: query
        name: failedAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: Number of tasks to skip in the response
        explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Maximum number of tasks to return in one call
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ExecutionReport'
                type: array
          description: List of corresponding tasks
        "400":
          description: Invalid status value
      summary: List tasks
      tags:
      - task
  /tasks/{taskId}:
    delete:
      operationId: cancelTask
      parameters:
      - description: The ID of the task
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Task has been cancelled
        "400":
          description: Invalid task ID
      summary: Cancel a task
      tags:
      - task
    get:
      operationId: getTask
      parameters:
      - description: The ID of the task
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionReport'
          description: Execution report of the task
        "400":
          description: Invalid task ID
        "404":
          description: Task ID not found
      summary: Get a task's details
      tags:
      - task
  /tasks/{taskId}/await:
    get:
      operationId: awaitTaskCompletion
      parameters:
      - description: The ID of the task
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      - description: "The timeout duration in the format Nunit (e.g., 30s, 5m, 7d,\
          \ 1y)"
        explode: true
        in: query
        name: timeout
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionReport'
          description: Execution report of the task
        "400":
          description: Invalid task ID or invalid timeout
        "404":
          description: Task ID not found
        "408":
          description: Timeout reached
      summary: Await the completion of a task
      tags:
      - task
  /users:
    get:
      operationId: listUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/listUsers_200_response_inner'
                type: array
          description: The user name list was successfully retrieved
      summary: Retrieve the user list
      tags:
      - users
  /users/{baseUser}/authorizedUsers:
    delete:
      operationId: removeAllDelegatedUsers
      parameters:
      - explode: false
        in: path
        name: baseUser
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Removal of the delegated users succeeded
        "404":
          description: The base user does not exist
      summary: Remove all delegated users of a base user
      tags:
      - users
    get:
      operationId: listDelegatedUsers
      parameters:
      - explode: false
        in: path
        name: baseUser
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: The list was successfully retrieved
      summary: Retrieve the list of delegated users of a base user
      tags:
      - users
  /users/{baseUser}/authorizedUsers/delegatedUser:
    delete:
      operationId: removeDelegatedUser
      parameters:
      - explode: false
        in: path
        name: baseUser
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: delegatedUser
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Removal of the delegated user succeeded
        "400":
          description: The delegated user does not exist
        "404":
          description: The base user does not exist
      summary: Remove a delegated user from a base user
      tags:
      - users
    put:
      operationId: addDelegatedUser
      parameters:
      - explode: false
        in: path
        name: baseUser
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: delegatedUser
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Addition of the delegated user succeeded
        "400":
          description: The delegated user does not exist
        "404":
          description: The base user does not exist
      summary: Add a delegated user to a base user
      tags:
      - users
  /users/{givenUser}/allowedFromHeaders:
    get:
      operationId: listAllowedFromHeaders
      parameters:
      - explode: false
        in: path
        name: givenUser
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: The list was successfully retrieved
      summary: Retrieve the list of allowed From headers for a given user
      tags:
      - users
  /users/{oldUser}/rename/{newUser}:
    post:
      operationId: changeUsername
      parameters:
      - explode: false
        in: path
        name: oldUser
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: newUser
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: action
        required: true
        schema:
          enum:
          - rename
          type: string
        style: form
      responses:
        "201":
          description: Success. Corresponding task id is returned.
        "400":
          description: Error in the request. Details can be found in the reported
            error
      summary: Change a username
      tags:
      - users
  /users/{username}:
    delete:
      operationId: deleteUser
      parameters:
      - description: The username to be deleted
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The user was successfully deleted
      summary: Delete a user
      tags:
      - users
    head:
      operationId: existsUser
      parameters:
      - description: The username to be tested
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: The user exists
        "400":
          description: The username is invalid
        "404":
          description: The user does not exist
      summary: Test user existence
      tags:
      - users
    put:
      operationId: upsertUser
      parameters:
      - description: The username of the user to be created or updated
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      - description: Indicates whether to force update the password (for updating
          password only)
        explode: true
        in: query
        name: force
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/upsertUser_request'
        required: true
      responses:
        "204":
          description: The user was successfully created or the password was successfully
            updated
        "400":
          description: The user name or the payload is invalid
        "409":
          description: The user name already exists
      summary: Create or Update User
      tags:
      - users
  /users/{username}/identities:
    get:
      operationId: listUserIdentities
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: default
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/listUserIdentities_200_response_inner'
                type: array
          description: The list was successfully retrieved
      summary: Retrieve the user identities
      tags:
      - users
    post:
      operationId: createUserIdentity
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUserIdentity_request'
        required: true
      responses:
        "201":
          description: The new identity was successfully created
        "400":
          description: The payload is invalid
        "404":
          description: The username is unknown
      summary: Create a JMAP user identity
      tags:
      - users
  /users/{username}/identities/{identityId}:
    put:
      operationId: updateUserIdentity
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: identityId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUserIdentity_request'
        required: true
      responses:
        "204":
          description: The identity was successfully updated
        "400":
          description: The payload is invalid
        "404":
          description: The username is unknown
      summary: Update a JMAP user identity
      tags:
      - users
  /users/{username}/mailboxes:
    delete:
      operationId: deleteMailboxes
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The user does not have mailboxes anymore
        "404":
          description: The user name does not exist
      summary: Delete user mailboxes
      tags:
      - user-mailbox
    get:
      operationId: listMailboxes
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/listMailboxes_200_response_inner'
                type: array
          description: The mailboxes list was successfully retrieved
        "404":
          description: The user name does not exist
      summary: List user mailboxes
      tags:
      - user-mailbox
  /users/{username}/mailboxes/{mailboxName}/messageCount:
    get:
      operationId: countEmails
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: mailboxName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: The number of emails in the given mailbox
        "400":
          description: Invalid mailbox name
        "404":
          description: Invalid get on user mailboxes. The username or mailboxName
            does not exist
      summary: Count emails in a mailbox
      tags:
      - user-mailbox
  /users/{username}/mailboxes/{mailboxName}/messages:
    delete:
      operationId: clearMailbox
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: mailboxName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          description: Success. Corresponding task ID is returned
        "400":
          description: Invalid mailbox name
        "404":
          description: Invalid get on user mailboxes. The username or mailboxName
            does not exist
      summary: Clear mailbox content
      tags:
      - user-mailbox
  /users/{username}/mailboxes/{mailboxName}/unseenMessageCount:
    get:
      operationId: countUnseenEmails
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: mailboxName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: The number of unseen emails in the given mailbox
        "400":
          description: Invalid mailbox name
        "404":
          description: Invalid get on user mailboxes. The username or mailboxName
            does not exist
      summary: Count unseen emails in a mailbox
      tags:
      - user-mailbox
  /users/{username}/mailboxes/{mailboxNameToBeCreated}:
    put:
      operationId: createMailbox
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: mailboxNameToBeCreated
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The mailbox now exists on the server
        "400":
          description: Invalid mailbox name
        "404":
          description: The user name does not exist
      summary: Create a mailbox
      tags:
      - user-mailbox
  /users/{username}/mailboxes/{mailboxNameToBeTested}:
    get:
      operationId: existsMailbox
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: mailboxNameToBeTested
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The mailbox exists
        "400":
          description: Invalid mailbox name
        "404":
          description: "The user name does not exist, or the mailbox does not exist"
      summary: Test existence of a mailbox
      tags:
      - user-mailbox
  /users/{username}/mailboxes/INBOX.work:
    delete:
      operationId: deleteMailbox
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: mailboxNameToBeDeleted
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The mailbox now does not exist on the server
        "400":
          description: Invalid mailbox name
        "404":
          description: The user name does not exist
      summary: Delete a mailbox and its children
      tags:
      - user-mailbox
  /users/{username}/mailboxes?action=export:
    post:
      operationId: exportMailboxes
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          description: Success. Corresponding task ID is returned
        "404":
          description: The user name does not exist
      summary: Export user mailboxes
      tags:
      - user-mailbox
  /users/{username}/mailboxes?task=reIndex:
    post:
      operationId: reindexEmails
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: messagesPerSecond
        required: false
        schema:
          default: 50
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: mode
        required: false
        schema:
          default: rebuildAll
          enum:
          - rebuildAll
          - rebuildAllNoCleanup
          - fixOutdated
          type: string
        style: form
      responses:
        "201":
          description: Success. Corresponding task ID is returned
        "400":
          description: Error in the request. Details can be found in the reported
            error
        "404":
          description: User not found
      summary: Reindex a user's mails
      tags:
      - user-mailbox
  /users/{username}/mailboxes?task=recomputeFastViewProjectionItems:
    post:
      operationId: recomputeMessageViewProjection
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: messagesPerSecond
        required: false
        schema:
          default: 10
          minimum: 1
          type: integer
        style: form
      responses:
        "201":
          description: Success. Corresponding task ID is returned
        "400":
          description: Error in the request. Details can be found in the reported
            error
        "404":
          description: User not found
      summary: Recompute User JMAP fast message view projection
      tags:
      - user-mailbox
  /users/{username}/mailboxes?task=subscribeAll:
    post:
      operationId: subscribeAllMailboxes
      parameters:
      - explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          description: Success. Corresponding task ID is returned
        "404":
          description: No such user
      summary: Subscribe a user to all of their mailboxes
      tags:
      - user-mailbox
components:
  schemas:
    Criterion:
      properties:
        fieldName:
          enum:
          - subject
          - deliveryDate
          - deletionDate
          - sender
          - recipients
          - hasAttachment
          - originMailboxes
          type: string
        operator:
          enum:
          - contains
          - containsIgnoreCase
          - equals
          - equalsIgnoreCase
          - beforeOrEquals
          - afterOrEquals
          type: string
        value:
          type: string
      type: object
    DomainAlias:
      example:
        source: source
      properties:
        source:
          description: Source domain alias
          type: string
      type: object
    Error:
      properties:
        error:
          type: string
      type: object
    ExecutionReport:
      example:
        additionalInformation: "{}"
        failedDate: 2000-01-23T04:56:07.000+00:00
        submitDate: 2000-01-23T04:56:07.000+00:00
        startedDate: 2000-01-23T04:56:07.000+00:00
        type: type
        cancelledDate: 2000-01-23T04:56:07.000+00:00
        completedDate: 2000-01-23T04:56:07.000+00:00
        taskId: taskId
        status: waiting
      properties:
        additionalInformation:
          description: Additional information about the task
          type: object
        cancelledDate:
          description: The cancellation date of the task (null if not cancelled)
          format: date-time
          nullable: true
          type: string
        completedDate:
          description: The completion date of the task execution
          format: date-time
          type: string
        failedDate:
          description: The failure date of the task (null if not failed)
          format: date-time
          nullable: true
          type: string
        startedDate:
          description: The start date of the task execution
          format: date-time
          type: string
        status:
          description: The status of the task
          enum:
          - waiting
          - inProgress
          - cancelled
          - completed
          - failed
          type: string
        submitDate:
          description: The submission date of the task
          format: date-time
          type: string
        taskId:
          description: The ID of the task
          type: string
        type:
          description: The type of the task
          type: string
      type: object
    HealthCheckInfo:
      example:
        escapedComponentName: escapedComponentName
        componentName: componentName
      properties:
        componentName:
          type: string
        escapedComponentName:
          type: string
      type: object
    HealthCheckResult:
      example:
        escapedComponentName: escapedComponentName
        cause: cause
        componentName: componentName
        status: healthy
      properties:
        cause:
          nullable: true
          type: string
        componentName:
          type: string
        escapedComponentName:
          type: string
        status:
          enum:
          - healthy
          - degraded
          - unhealthy
          type: string
      type: object
    Task:
      properties:
        addedMessageIdEntries:
          type: integer
        errors:
          items:
            $ref: '#/components/schemas/Task_errors_inner'
          type: array
        fixedInconsistencies:
          items:
            $ref: '#/components/schemas/Task_errors_inner'
          type: array
        processedImapUidEntries:
          type: integer
        processedMessageIdEntries:
          type: integer
        removedMessageIdEntries:
          type: integer
        runningOptions:
          $ref: '#/components/schemas/Task_runningOptions'
        timestamp:
          format: date-time
          type: string
        type:
          type: string
        updatedMessageIdEntries:
          type: integer
      type: object
    TaskId:
      properties:
        taskId:
          description: The ID of the task
          type: string
      type: object
    getAlias_200_response_inner:
      example:
        source: alias1@domain.com
      properties:
        source:
          example: alias1@domain.com
          format: email
          type: string
      type: object
    listDestinations_200_response_inner:
      example:
        mailAddress: destination1@domain.com
      properties:
        mailAddress:
          example: destination1@domain.com
          format: email
          type: string
      type: object
    runBlobGarbageCollector_200_response:
      example:
        bloomFilterAssociatedProbability: 6.027456183070403
        blobCount: 0
        bloomFilterExpectedBlobCount: 1
        gcedBlobCount: 5
        referenceSourceCount: 5
      properties:
        blobCount:
          description: Count of blobs tried against the bloom filter
          type: integer
        bloomFilterAssociatedProbability:
          description: Supplied associatedProbability query parameter
          format: double
          type: number
        bloomFilterExpectedBlobCount:
          description: Supplied expectedBlobCount query parameter
          type: integer
        gcedBlobCount:
          description: Count of blobs that were garbage collected
          type: integer
        referenceSourceCount:
          description: Count of distinct blob references encountered while populating
            the bloom filter
          type: integer
      type: object
    correctGhostMailbox_request:
      example:
        mergeDestination: "{id2}"
        mergeOrigin: "{id1}"
      properties:
        mergeDestination:
          description: The ID of the destination mailbox (new mailbox)
          type: string
        mergeOrigin:
          description: The ID of the mailbox to be merged (ghosted mailbox)
          type: string
      type: object
    correctGhostMailbox_201_response_additionalInformation:
      example:
        messageFailedCount: 0
        messageMovedCount: 1
        newMailboxId: 4555159-52ae-895f-ccb7-586a4412fb50
        oldMailboxId: 5641376-02ed-47bd-bcc7-76ff6262d92a
        totalMessageCount: 1
      properties:
        messageFailedCount:
          type: integer
        messageMovedCount:
          type: integer
        newMailboxId:
          type: string
        oldMailboxId:
          type: string
        totalMessageCount:
          type: integer
      type: object
    correctGhostMailbox_201_response:
      example:
        additionalInformation:
          messageFailedCount: 0
          messageMovedCount: 1
          newMailboxId: 4555159-52ae-895f-ccb7-586a4412fb50
          oldMailboxId: 5641376-02ed-47bd-bcc7-76ff6262d92a
          totalMessageCount: 1
        type: type
        taskId: taskId
      properties:
        additionalInformation:
          $ref: '#/components/schemas/correctGhostMailbox_201_response_additionalInformation'
        taskId:
          type: string
        type:
          type: string
      type: object
    performActionOnCassandraMappings_201_response:
      example:
        taskId: taskId
      properties:
        taskId:
          description: The ID of the created task
          type: string
      type: object
    getSchemaVersion_200_response:
      example:
        version: 2
      properties:
        version:
          type: integer
      type: object
    getLatestAvailableSchemaVersion_200_response:
      example:
        version: 3
      properties:
        version:
          type: integer
      type: object
    upgradeSchemaVersion_200_response_additionalInformation:
      example:
        targetVersion: 3
      properties:
        targetVersion:
          type: integer
      type: object
    upgradeSchemaVersion_200_response:
      example:
        additionalInformation:
          targetVersion: 3
        type: type
        taskId: taskId
      properties:
        additionalInformation:
          $ref: '#/components/schemas/upgradeSchemaVersion_200_response_additionalInformation'
        taskId:
          type: string
        type:
          type: string
      type: object
    upgradeToLatestSchemaVersion_200_response_additionalInformation:
      example:
        toVersion: 2
      properties:
        toVersion:
          type: integer
      type: object
    upgradeToLatestSchemaVersion_200_response:
      example:
        additionalInformation:
          toVersion: 2
        type: type
        taskId: taskId
      properties:
        additionalInformation:
          $ref: '#/components/schemas/upgradeToLatestSchemaVersion_200_response_additionalInformation'
        taskId:
          type: string
        type:
          type: string
      type: object
    exportDeletedMessages_request:
      properties:
        combinator:
          enum:
          - and
          - or
          type: string
        criteria:
          items:
            $ref: '#/components/schemas/Criterion'
          type: array
      type: object
    storeDLPConfiguration_request_rules_inner:
      properties:
        explanation:
          description: Description of the configuration item
          type: string
        expression:
          description: Regular expression to match contents of targets
          type: string
        id:
          description: Unique identifier of the configuration item
          type: string
        targetsContent:
          description: Indicates if the expression should be applied to the subject
            headers and textual bodies of the mail
          type: boolean
        targetsRecipients:
          description: Indicates if the expression should be applied to the recipients
            of the mail
          type: boolean
        targetsSender:
          description: Indicates if the expression should be applied to the sender
            and from headers of the mail
          type: boolean
      type: object
    storeDLPConfiguration_request:
      properties:
        rules:
          items:
            $ref: '#/components/schemas/storeDLPConfiguration_request_rules_inner'
          type: array
      type: object
    deleteUserDataOfDomain_request:
      properties:
        action:
          enum:
          - deleteData
          type: string
      required:
      - action
      type: object
    checkAllComponents_200_response:
      example:
        checks:
        - escapedComponentName: escapedComponentName
          cause: cause
          componentName: componentName
          status: healthy
        - escapedComponentName: escapedComponentName
          cause: cause
          componentName: componentName
          status: healthy
        status: healthy
      properties:
        checks:
          items:
            $ref: '#/components/schemas/HealthCheckResult'
          type: array
        status:
          description: Aggregated status of all checks
          enum:
          - healthy
          - degraded
          - unhealthy
          type: string
      type: object
    cleanUploadRepository_request:
      properties:
        scope:
          description: "Specifies the scope of cleanup (e.g., \"expired\" uploads)"
          enum:
          - expired
          type: string
        timestamp:
          description: Timestamp of the task creation
          format: date-time
          type: string
        type:
          description: Type of the task
          example: UploadRepositoryCleanupTask
          type: string
      type: object
    cleanUploadRepository_201_response:
      example:
        taskId: taskId
      properties:
        taskId:
          description: Identifier of the scheduled task
          type: string
      type: object
    flushMailsOfMailQueue_request:
      properties:
        delayed:
          type: boolean
      type: object
    listMailsOfMailQueue_200_response_inner:
      example:
        sender: sender
        recipients:
        - recipients
        - recipients
        name: name
        nextDelivery: 2000-01-23T04:56:07.000+00:00
      properties:
        name:
          type: string
        nextDelivery:
          format: date-time
          type: string
        recipients:
          items:
            type: string
          type: array
        sender:
          type: string
      type: object
    listMailRepositories_200_response_inner:
      properties:
        path:
          type: string
        repository:
          type: string
      type: object
    getMailRepository_200_response:
      example:
        path: path
        size: 0
        repository: repository
      properties:
        path:
          type: string
        repository:
          type: string
        size:
          type: integer
      type: object
    performActionsOnMailboxes_201_response:
      example:
        taskId: taskId
      properties:
        taskId:
          type: string
      type: object
    listAddressMappings_200_response_mappingSource_inner:
      properties:
        mapping:
          type: string
        type:
          enum:
          - Alias
          - Address
          - Domain
          - Error
          - Forward
          - Group
          - Regex
          type: string
      type: object
    listAddressMappings_200_response:
      example:
        alias@domain.tld:
        - mapping: user@domain.tld
          type: Alias
        - mapping: group-user@domain.tld
          type: Group
        aliasdomain.tld:
        - mapping: realdomain.tld
          type: Domain
        group@domain.tld:
        - mapping: user@domain.tld
          type: Address
      properties:
        mappingSource:
          items:
            $ref: '#/components/schemas/listAddressMappings_200_response_mappingSource_inner'
          type: array
      type: object
    listUserMappings_200_response_inner:
      properties:
        mapping:
          type: string
        type:
          enum:
          - Address
          - Alias
          - Group
          type: string
      type: object
    scheduleTask_400_response:
      properties:
        error:
          type: string
      type: object
    getGlobalQuota_200_response:
      example:
        count: 252
        size: 242
      properties:
        count:
          type: integer
        size:
          type: integer
      type: object
    updateGlobalQuota_request:
      example:
        count: 52
        size: 42
      properties:
        count:
          type: integer
        size:
          type: integer
      type: object
    recomputeCurrentQuotas_request:
      example:
        usersPerSecond: 20
      properties:
        usersPerSecond:
          minimum: 1
          type: integer
      type: object
    updateGlobalSieveQuota_request:
      properties:
        bytes:
          description: Bytes count allowed by user per default on this server
          type: integer
      type: object
    updateUserSieveQuota_request:
      properties:
        bytes:
          description: Bytes count allowed for this user on this server
          type: integer
      type: object
    listUsers_200_response_inner:
      example:
        username: username
      properties:
        username:
          type: string
      type: object
    upsertUser_request:
      properties:
        password:
          type: string
      required:
      - password
      type: object
    listUserIdentities_200_response_inner_bcc_inner:
      example:
        name: name
        email: email
      properties:
        email:
          type: string
        name:
          type: string
      type: object
    listUserIdentities_200_response_inner:
      example:
        mayDelete: true
        bcc:
        - name: name
          email: email
        - name: name
          email: email
        textSignature: textSignature
        sortOrder: 0
        htmlSignature: htmlSignature
        name: name
        replyTo:
        - name: name
          email: email
        - name: name
          email: email
        id: id
        email: email
      properties:
        bcc:
          items:
            $ref: '#/components/schemas/listUserIdentities_200_response_inner_bcc_inner'
          type: array
        email:
          type: string
        htmlSignature:
          type: string
        id:
          type: string
        mayDelete:
          type: boolean
        name:
          type: string
        replyTo:
          items:
            $ref: '#/components/schemas/listUserIdentities_200_response_inner_bcc_inner'
          type: array
        sortOrder:
          type: integer
        textSignature:
          type: string
      type: object
    createUserIdentity_request:
      properties:
        bcc:
          items:
            $ref: '#/components/schemas/listUserIdentities_200_response_inner_bcc_inner'
          type: array
        email:
          type: string
        htmlSignature:
          type: string
        mayDelete:
          type: boolean
        name:
          type: string
        replyTo:
          items:
            $ref: '#/components/schemas/listUserIdentities_200_response_inner_bcc_inner'
          type: array
        sortOrder:
          type: integer
        textSignature:
          type: string
      type: object
    updateUserIdentity_request:
      properties:
        bcc:
          items:
            $ref: '#/components/schemas/listUserIdentities_200_response_inner_bcc_inner'
          type: array
        htmlSignature:
          type: string
        name:
          type: string
        replyTo:
          items:
            $ref: '#/components/schemas/listUserIdentities_200_response_inner_bcc_inner'
          type: array
        sortOrder:
          type: integer
        textSignature:
          type: string
      type: object
    listMailboxes_200_response_inner:
      example:
        mailboxName: mailboxName
      properties:
        mailboxName:
          type: string
      type: object
    Task_errors_inner:
      properties:
        mailboxId:
          type: string
        messageId:
          type: string
        uid:
          type: integer
      type: object
    Task_runningOptions:
      properties:
        messagesPerSecond:
          type: integer
        mode:
          enum:
          - REBUILD_ALL
          - REBUILD_ALL_NO_CLEANUP
          - FIX_OUTDATED
          type: string
      type: object
