/*
Apache JAMES Web Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the UpsertUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpsertUserRequest{}

// UpsertUserRequest struct for UpsertUserRequest
type UpsertUserRequest struct {
	Password string `json:"password"`
}

type _UpsertUserRequest UpsertUserRequest

// NewUpsertUserRequest instantiates a new UpsertUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpsertUserRequest(password string) *UpsertUserRequest {
	this := UpsertUserRequest{}
	this.Password = password
	return &this
}

// NewUpsertUserRequestWithDefaults instantiates a new UpsertUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpsertUserRequestWithDefaults() *UpsertUserRequest {
	this := UpsertUserRequest{}
	return &this
}

// GetPassword returns the Password field value
func (o *UpsertUserRequest) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *UpsertUserRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *UpsertUserRequest) SetPassword(v string) {
	o.Password = v
}

func (o UpsertUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpsertUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["password"] = o.Password
	return toSerialize, nil
}

func (o *UpsertUserRequest) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpsertUserRequest := _UpsertUserRequest{}

	err = json.Unmarshal(bytes, &varUpsertUserRequest)

	if err != nil {
		return err
	}

	*o = UpsertUserRequest(varUpsertUserRequest)

	return err
}

type NullableUpsertUserRequest struct {
	value *UpsertUserRequest
	isSet bool
}

func (v NullableUpsertUserRequest) Get() *UpsertUserRequest {
	return v.value
}

func (v *NullableUpsertUserRequest) Set(val *UpsertUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpsertUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpsertUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpsertUserRequest(val *UpsertUserRequest) *NullableUpsertUserRequest {
	return &NullableUpsertUserRequest{value: val, isSet: true}
}

func (v NullableUpsertUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpsertUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


