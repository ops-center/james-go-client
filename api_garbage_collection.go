/*
Apache JAMES Web Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// GarbageCollectionAPIService GarbageCollectionAPI service
type GarbageCollectionAPIService service

type ApiRunBlobGarbageCollectorRequest struct {
	ctx context.Context
	ApiService *GarbageCollectionAPIService
	scope *string
	associatedProbability *float64
	expectedBlobCount *int32
}

// Specifies the scope of garbage collection (e.g., \&quot;unreferenced\&quot; blobs)
func (r ApiRunBlobGarbageCollectorRequest) Scope(scope string) ApiRunBlobGarbageCollectorRequest {
	r.scope = &scope
	return r
}

func (r ApiRunBlobGarbageCollectorRequest) AssociatedProbability(associatedProbability float64) ApiRunBlobGarbageCollectorRequest {
	r.associatedProbability = &associatedProbability
	return r
}

func (r ApiRunBlobGarbageCollectorRequest) ExpectedBlobCount(expectedBlobCount int32) ApiRunBlobGarbageCollectorRequest {
	r.expectedBlobCount = &expectedBlobCount
	return r
}

func (r ApiRunBlobGarbageCollectorRequest) Execute() (*RunBlobGarbageCollector200Response, *http.Response, error) {
	return r.ApiService.RunBlobGarbageCollectorExecute(r)
}

/*
RunBlobGarbageCollector Run blob garbage collection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRunBlobGarbageCollectorRequest
*/
func (a *GarbageCollectionAPIService) RunBlobGarbageCollector(ctx context.Context) ApiRunBlobGarbageCollectorRequest {
	return ApiRunBlobGarbageCollectorRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RunBlobGarbageCollector200Response
func (a *GarbageCollectionAPIService) RunBlobGarbageCollectorExecute(r ApiRunBlobGarbageCollectorRequest) (*RunBlobGarbageCollector200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RunBlobGarbageCollector200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GarbageCollectionAPIService.RunBlobGarbageCollector")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blobs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.scope == nil {
		return localVarReturnValue, nil, reportError("scope is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	if r.associatedProbability != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "associatedProbability", r.associatedProbability, "")
	} else {
		var defaultValue float64 = 0.01
		r.associatedProbability = &defaultValue
	}
	if r.expectedBlobCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expectedBlobCount", r.expectedBlobCount, "")
	} else {
		var defaultValue int32 = 1000000
		r.expectedBlobCount = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
