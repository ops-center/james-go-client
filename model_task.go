/*
Apache JAMES Web Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Task type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Task{}

// Task struct for Task
type Task struct {
	AddedMessageIdEntries *int32 `json:"addedMessageIdEntries,omitempty"`
	Errors []TaskErrorsInner `json:"errors,omitempty"`
	FixedInconsistencies []TaskErrorsInner `json:"fixedInconsistencies,omitempty"`
	ProcessedImapUidEntries *int32 `json:"processedImapUidEntries,omitempty"`
	ProcessedMessageIdEntries *int32 `json:"processedMessageIdEntries,omitempty"`
	RemovedMessageIdEntries *int32 `json:"removedMessageIdEntries,omitempty"`
	RunningOptions *TaskRunningOptions `json:"runningOptions,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
	Type *string `json:"type,omitempty"`
	UpdatedMessageIdEntries *int32 `json:"updatedMessageIdEntries,omitempty"`
}

// NewTask instantiates a new Task object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTask() *Task {
	this := Task{}
	return &this
}

// NewTaskWithDefaults instantiates a new Task object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskWithDefaults() *Task {
	this := Task{}
	return &this
}

// GetAddedMessageIdEntries returns the AddedMessageIdEntries field value if set, zero value otherwise.
func (o *Task) GetAddedMessageIdEntries() int32 {
	if o == nil || IsNil(o.AddedMessageIdEntries) {
		var ret int32
		return ret
	}
	return *o.AddedMessageIdEntries
}

// GetAddedMessageIdEntriesOk returns a tuple with the AddedMessageIdEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetAddedMessageIdEntriesOk() (*int32, bool) {
	if o == nil || IsNil(o.AddedMessageIdEntries) {
		return nil, false
	}
	return o.AddedMessageIdEntries, true
}

// HasAddedMessageIdEntries returns a boolean if a field has been set.
func (o *Task) HasAddedMessageIdEntries() bool {
	if o != nil && !IsNil(o.AddedMessageIdEntries) {
		return true
	}

	return false
}

// SetAddedMessageIdEntries gets a reference to the given int32 and assigns it to the AddedMessageIdEntries field.
func (o *Task) SetAddedMessageIdEntries(v int32) {
	o.AddedMessageIdEntries = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *Task) GetErrors() []TaskErrorsInner {
	if o == nil || IsNil(o.Errors) {
		var ret []TaskErrorsInner
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetErrorsOk() ([]TaskErrorsInner, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *Task) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []TaskErrorsInner and assigns it to the Errors field.
func (o *Task) SetErrors(v []TaskErrorsInner) {
	o.Errors = v
}

// GetFixedInconsistencies returns the FixedInconsistencies field value if set, zero value otherwise.
func (o *Task) GetFixedInconsistencies() []TaskErrorsInner {
	if o == nil || IsNil(o.FixedInconsistencies) {
		var ret []TaskErrorsInner
		return ret
	}
	return o.FixedInconsistencies
}

// GetFixedInconsistenciesOk returns a tuple with the FixedInconsistencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetFixedInconsistenciesOk() ([]TaskErrorsInner, bool) {
	if o == nil || IsNil(o.FixedInconsistencies) {
		return nil, false
	}
	return o.FixedInconsistencies, true
}

// HasFixedInconsistencies returns a boolean if a field has been set.
func (o *Task) HasFixedInconsistencies() bool {
	if o != nil && !IsNil(o.FixedInconsistencies) {
		return true
	}

	return false
}

// SetFixedInconsistencies gets a reference to the given []TaskErrorsInner and assigns it to the FixedInconsistencies field.
func (o *Task) SetFixedInconsistencies(v []TaskErrorsInner) {
	o.FixedInconsistencies = v
}

// GetProcessedImapUidEntries returns the ProcessedImapUidEntries field value if set, zero value otherwise.
func (o *Task) GetProcessedImapUidEntries() int32 {
	if o == nil || IsNil(o.ProcessedImapUidEntries) {
		var ret int32
		return ret
	}
	return *o.ProcessedImapUidEntries
}

// GetProcessedImapUidEntriesOk returns a tuple with the ProcessedImapUidEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetProcessedImapUidEntriesOk() (*int32, bool) {
	if o == nil || IsNil(o.ProcessedImapUidEntries) {
		return nil, false
	}
	return o.ProcessedImapUidEntries, true
}

// HasProcessedImapUidEntries returns a boolean if a field has been set.
func (o *Task) HasProcessedImapUidEntries() bool {
	if o != nil && !IsNil(o.ProcessedImapUidEntries) {
		return true
	}

	return false
}

// SetProcessedImapUidEntries gets a reference to the given int32 and assigns it to the ProcessedImapUidEntries field.
func (o *Task) SetProcessedImapUidEntries(v int32) {
	o.ProcessedImapUidEntries = &v
}

// GetProcessedMessageIdEntries returns the ProcessedMessageIdEntries field value if set, zero value otherwise.
func (o *Task) GetProcessedMessageIdEntries() int32 {
	if o == nil || IsNil(o.ProcessedMessageIdEntries) {
		var ret int32
		return ret
	}
	return *o.ProcessedMessageIdEntries
}

// GetProcessedMessageIdEntriesOk returns a tuple with the ProcessedMessageIdEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetProcessedMessageIdEntriesOk() (*int32, bool) {
	if o == nil || IsNil(o.ProcessedMessageIdEntries) {
		return nil, false
	}
	return o.ProcessedMessageIdEntries, true
}

// HasProcessedMessageIdEntries returns a boolean if a field has been set.
func (o *Task) HasProcessedMessageIdEntries() bool {
	if o != nil && !IsNil(o.ProcessedMessageIdEntries) {
		return true
	}

	return false
}

// SetProcessedMessageIdEntries gets a reference to the given int32 and assigns it to the ProcessedMessageIdEntries field.
func (o *Task) SetProcessedMessageIdEntries(v int32) {
	o.ProcessedMessageIdEntries = &v
}

// GetRemovedMessageIdEntries returns the RemovedMessageIdEntries field value if set, zero value otherwise.
func (o *Task) GetRemovedMessageIdEntries() int32 {
	if o == nil || IsNil(o.RemovedMessageIdEntries) {
		var ret int32
		return ret
	}
	return *o.RemovedMessageIdEntries
}

// GetRemovedMessageIdEntriesOk returns a tuple with the RemovedMessageIdEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetRemovedMessageIdEntriesOk() (*int32, bool) {
	if o == nil || IsNil(o.RemovedMessageIdEntries) {
		return nil, false
	}
	return o.RemovedMessageIdEntries, true
}

// HasRemovedMessageIdEntries returns a boolean if a field has been set.
func (o *Task) HasRemovedMessageIdEntries() bool {
	if o != nil && !IsNil(o.RemovedMessageIdEntries) {
		return true
	}

	return false
}

// SetRemovedMessageIdEntries gets a reference to the given int32 and assigns it to the RemovedMessageIdEntries field.
func (o *Task) SetRemovedMessageIdEntries(v int32) {
	o.RemovedMessageIdEntries = &v
}

// GetRunningOptions returns the RunningOptions field value if set, zero value otherwise.
func (o *Task) GetRunningOptions() TaskRunningOptions {
	if o == nil || IsNil(o.RunningOptions) {
		var ret TaskRunningOptions
		return ret
	}
	return *o.RunningOptions
}

// GetRunningOptionsOk returns a tuple with the RunningOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetRunningOptionsOk() (*TaskRunningOptions, bool) {
	if o == nil || IsNil(o.RunningOptions) {
		return nil, false
	}
	return o.RunningOptions, true
}

// HasRunningOptions returns a boolean if a field has been set.
func (o *Task) HasRunningOptions() bool {
	if o != nil && !IsNil(o.RunningOptions) {
		return true
	}

	return false
}

// SetRunningOptions gets a reference to the given TaskRunningOptions and assigns it to the RunningOptions field.
func (o *Task) SetRunningOptions(v TaskRunningOptions) {
	o.RunningOptions = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Task) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Task) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *Task) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Task) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Task) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Task) SetType(v string) {
	o.Type = &v
}

// GetUpdatedMessageIdEntries returns the UpdatedMessageIdEntries field value if set, zero value otherwise.
func (o *Task) GetUpdatedMessageIdEntries() int32 {
	if o == nil || IsNil(o.UpdatedMessageIdEntries) {
		var ret int32
		return ret
	}
	return *o.UpdatedMessageIdEntries
}

// GetUpdatedMessageIdEntriesOk returns a tuple with the UpdatedMessageIdEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetUpdatedMessageIdEntriesOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedMessageIdEntries) {
		return nil, false
	}
	return o.UpdatedMessageIdEntries, true
}

// HasUpdatedMessageIdEntries returns a boolean if a field has been set.
func (o *Task) HasUpdatedMessageIdEntries() bool {
	if o != nil && !IsNil(o.UpdatedMessageIdEntries) {
		return true
	}

	return false
}

// SetUpdatedMessageIdEntries gets a reference to the given int32 and assigns it to the UpdatedMessageIdEntries field.
func (o *Task) SetUpdatedMessageIdEntries(v int32) {
	o.UpdatedMessageIdEntries = &v
}

func (o Task) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Task) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddedMessageIdEntries) {
		toSerialize["addedMessageIdEntries"] = o.AddedMessageIdEntries
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.FixedInconsistencies) {
		toSerialize["fixedInconsistencies"] = o.FixedInconsistencies
	}
	if !IsNil(o.ProcessedImapUidEntries) {
		toSerialize["processedImapUidEntries"] = o.ProcessedImapUidEntries
	}
	if !IsNil(o.ProcessedMessageIdEntries) {
		toSerialize["processedMessageIdEntries"] = o.ProcessedMessageIdEntries
	}
	if !IsNil(o.RemovedMessageIdEntries) {
		toSerialize["removedMessageIdEntries"] = o.RemovedMessageIdEntries
	}
	if !IsNil(o.RunningOptions) {
		toSerialize["runningOptions"] = o.RunningOptions
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UpdatedMessageIdEntries) {
		toSerialize["updatedMessageIdEntries"] = o.UpdatedMessageIdEntries
	}
	return toSerialize, nil
}

type NullableTask struct {
	value *Task
	isSet bool
}

func (v NullableTask) Get() *Task {
	return v.value
}

func (v *NullableTask) Set(val *Task) {
	v.value = val
	v.isSet = true
}

func (v NullableTask) IsSet() bool {
	return v.isSet
}

func (v *NullableTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTask(val *Task) *NullableTask {
	return &NullableTask{value: val, isSet: true}
}

func (v NullableTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


