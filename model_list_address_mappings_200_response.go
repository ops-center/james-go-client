/*
Apache JAMES Web Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListAddressMappings200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListAddressMappings200Response{}

// ListAddressMappings200Response struct for ListAddressMappings200Response
type ListAddressMappings200Response struct {
	MappingSource []ListAddressMappings200ResponseMappingSourceInner `json:"mappingSource,omitempty"`
}

// NewListAddressMappings200Response instantiates a new ListAddressMappings200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListAddressMappings200Response() *ListAddressMappings200Response {
	this := ListAddressMappings200Response{}
	return &this
}

// NewListAddressMappings200ResponseWithDefaults instantiates a new ListAddressMappings200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListAddressMappings200ResponseWithDefaults() *ListAddressMappings200Response {
	this := ListAddressMappings200Response{}
	return &this
}

// GetMappingSource returns the MappingSource field value if set, zero value otherwise.
func (o *ListAddressMappings200Response) GetMappingSource() []ListAddressMappings200ResponseMappingSourceInner {
	if o == nil || IsNil(o.MappingSource) {
		var ret []ListAddressMappings200ResponseMappingSourceInner
		return ret
	}
	return o.MappingSource
}

// GetMappingSourceOk returns a tuple with the MappingSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListAddressMappings200Response) GetMappingSourceOk() ([]ListAddressMappings200ResponseMappingSourceInner, bool) {
	if o == nil || IsNil(o.MappingSource) {
		return nil, false
	}
	return o.MappingSource, true
}

// HasMappingSource returns a boolean if a field has been set.
func (o *ListAddressMappings200Response) HasMappingSource() bool {
	if o != nil && !IsNil(o.MappingSource) {
		return true
	}

	return false
}

// SetMappingSource gets a reference to the given []ListAddressMappings200ResponseMappingSourceInner and assigns it to the MappingSource field.
func (o *ListAddressMappings200Response) SetMappingSource(v []ListAddressMappings200ResponseMappingSourceInner) {
	o.MappingSource = v
}

func (o ListAddressMappings200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListAddressMappings200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MappingSource) {
		toSerialize["mappingSource"] = o.MappingSource
	}
	return toSerialize, nil
}

type NullableListAddressMappings200Response struct {
	value *ListAddressMappings200Response
	isSet bool
}

func (v NullableListAddressMappings200Response) Get() *ListAddressMappings200Response {
	return v.value
}

func (v *NullableListAddressMappings200Response) Set(val *ListAddressMappings200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableListAddressMappings200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableListAddressMappings200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListAddressMappings200Response(val *ListAddressMappings200Response) *NullableListAddressMappings200Response {
	return &NullableListAddressMappings200Response{value: val, isSet: true}
}

func (v NullableListAddressMappings200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListAddressMappings200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


