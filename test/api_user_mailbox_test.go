/*
Apache JAMES Web Admin API

Testing UserMailboxAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/searchlight/james-go-client"
)

func Test_openapi_UserMailboxAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UserMailboxAPIService ClearMailbox", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string
		var mailboxName string

		httpRes, err := apiClient.UserMailboxAPI.ClearMailbox(context.Background(), username, mailboxName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserMailboxAPIService CountEmails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string
		var mailboxName string

		httpRes, err := apiClient.UserMailboxAPI.CountEmails(context.Background(), username, mailboxName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserMailboxAPIService CountUnseenEmails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string
		var mailboxName string

		httpRes, err := apiClient.UserMailboxAPI.CountUnseenEmails(context.Background(), username, mailboxName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserMailboxAPIService CreateMailbox", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string
		var mailboxNameToBeCreated string

		httpRes, err := apiClient.UserMailboxAPI.CreateMailbox(context.Background(), username, mailboxNameToBeCreated).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserMailboxAPIService DeleteMailbox", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string
		var mailboxNameToBeDeleted string

		httpRes, err := apiClient.UserMailboxAPI.DeleteMailbox(context.Background(), username, mailboxNameToBeDeleted).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserMailboxAPIService DeleteMailboxes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string

		httpRes, err := apiClient.UserMailboxAPI.DeleteMailboxes(context.Background(), username).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserMailboxAPIService ExistsMailbox", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string
		var mailboxNameToBeTested string

		httpRes, err := apiClient.UserMailboxAPI.ExistsMailbox(context.Background(), username, mailboxNameToBeTested).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserMailboxAPIService ExportMailboxes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string

		httpRes, err := apiClient.UserMailboxAPI.ExportMailboxes(context.Background(), username).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserMailboxAPIService ListMailboxes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string

		resp, httpRes, err := apiClient.UserMailboxAPI.ListMailboxes(context.Background(), username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserMailboxAPIService RecomputeCassandraFilteringProjection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.UserMailboxAPI.RecomputeCassandraFilteringProjection(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserMailboxAPIService RecomputeMessageViewProjection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string

		httpRes, err := apiClient.UserMailboxAPI.RecomputeMessageViewProjection(context.Background(), username).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserMailboxAPIService ReindexEmails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string

		httpRes, err := apiClient.UserMailboxAPI.ReindexEmails(context.Background(), username).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserMailboxAPIService SubscribeAllMailboxes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string

		httpRes, err := apiClient.UserMailboxAPI.SubscribeAllMailboxes(context.Background(), username).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
