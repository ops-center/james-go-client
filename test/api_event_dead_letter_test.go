/*
Apache JAMES Web Admin API

Testing EventDeadLetterAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/searchlight/james-go-client"
)

func Test_openapi_EventDeadLetterAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EventDeadLetterAPIService DeleteAllEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string

		httpRes, err := apiClient.EventDeadLetterAPI.DeleteAllEvents(context.Background(), groupName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventDeadLetterAPIService DeleteEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var insertionId string

		httpRes, err := apiClient.EventDeadLetterAPI.DeleteEvent(context.Background(), groupName, insertionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventDeadLetterAPIService GetEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var insertionId string

		httpRes, err := apiClient.EventDeadLetterAPI.GetEvent(context.Background(), groupName, insertionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventDeadLetterAPIService ListFailedEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string

		resp, httpRes, err := apiClient.EventDeadLetterAPI.ListFailedEvents(context.Background(), groupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventDeadLetterAPIService ListMailboxListenerGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EventDeadLetterAPI.ListMailboxListenerGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventDeadLetterAPIService RedeliverAllEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.EventDeadLetterAPI.RedeliverAllEvents(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventDeadLetterAPIService RedeliverEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string
		var insertionId string

		httpRes, err := apiClient.EventDeadLetterAPI.RedeliverEvent(context.Background(), groupName, insertionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventDeadLetterAPIService RedeliverGroupEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string

		httpRes, err := apiClient.EventDeadLetterAPI.RedeliverGroupEvents(context.Background(), groupName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
