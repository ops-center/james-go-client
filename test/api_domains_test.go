/*
Apache JAMES Web Admin API

Testing DomainsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "go.opscenter.dev/james-go-client"
)

func Test_openapi_DomainsAPIService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DomainsAPIService CreateDomain", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var domainToBeCreated string

		httpRes, err := apiClient.DomainsAPI.CreateDomain(context.Background(), domainToBeCreated).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test DomainsAPIService CreateDomainAlias", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var domainName string

		httpRes, err := apiClient.DomainsAPI.CreateDomainAlias(context.Background(), domainName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test DomainsAPIService DeleteDomain", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var domainToBeDeleted string

		httpRes, err := apiClient.DomainsAPI.DeleteDomain(context.Background(), domainToBeDeleted).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test DomainsAPIService DeleteDomainAlias", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var domainName string

		httpRes, err := apiClient.DomainsAPI.DeleteDomainAlias(context.Background(), domainName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test DomainsAPIService DeleteUserDataOfDomain", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var domainToBeUsed string

		httpRes, err := apiClient.DomainsAPI.DeleteUserDataOfDomain(context.Background(), domainToBeUsed).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test DomainsAPIService ExistsDomain", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var domainName string

		httpRes, err := apiClient.DomainsAPI.ExistsDomain(context.Background(), domainName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test DomainsAPIService ListDomainAliases", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var domainName string

		resp, httpRes, err := apiClient.DomainsAPI.ListDomainAliases(context.Background(), domainName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test DomainsAPIService ListDomains", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DomainsAPI.ListDomains(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
