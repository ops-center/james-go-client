/*
Apache JAMES Web Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TaskId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskId{}

// TaskId struct for TaskId
type TaskId struct {
	// The ID of the task
	TaskId *string `json:"taskId,omitempty"`
}

// NewTaskId instantiates a new TaskId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskId() *TaskId {
	this := TaskId{}
	return &this
}

// NewTaskIdWithDefaults instantiates a new TaskId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskIdWithDefaults() *TaskId {
	this := TaskId{}
	return &this
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *TaskId) GetTaskId() string {
	if o == nil || IsNil(o.TaskId) {
		var ret string
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskId) GetTaskIdOk() (*string, bool) {
	if o == nil || IsNil(o.TaskId) {
		return nil, false
	}
	return o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *TaskId) HasTaskId() bool {
	if o != nil && !IsNil(o.TaskId) {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given string and assigns it to the TaskId field.
func (o *TaskId) SetTaskId(v string) {
	o.TaskId = &v
}

func (o TaskId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TaskId) {
		toSerialize["taskId"] = o.TaskId
	}
	return toSerialize, nil
}

type NullableTaskId struct {
	value *TaskId
	isSet bool
}

func (v NullableTaskId) Get() *TaskId {
	return v.value
}

func (v *NullableTaskId) Set(val *TaskId) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskId) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskId(val *TaskId) *NullableTaskId {
	return &NullableTaskId{value: val, isSet: true}
}

func (v NullableTaskId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


