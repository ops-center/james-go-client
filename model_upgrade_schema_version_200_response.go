/*
Apache JAMES Web Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpgradeSchemaVersion200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpgradeSchemaVersion200Response{}

// UpgradeSchemaVersion200Response struct for UpgradeSchemaVersion200Response
type UpgradeSchemaVersion200Response struct {
	AdditionalInformation *UpgradeSchemaVersion200ResponseAdditionalInformation `json:"additionalInformation,omitempty"`
	TaskId *string `json:"taskId,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewUpgradeSchemaVersion200Response instantiates a new UpgradeSchemaVersion200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradeSchemaVersion200Response() *UpgradeSchemaVersion200Response {
	this := UpgradeSchemaVersion200Response{}
	return &this
}

// NewUpgradeSchemaVersion200ResponseWithDefaults instantiates a new UpgradeSchemaVersion200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradeSchemaVersion200ResponseWithDefaults() *UpgradeSchemaVersion200Response {
	this := UpgradeSchemaVersion200Response{}
	return &this
}

// GetAdditionalInformation returns the AdditionalInformation field value if set, zero value otherwise.
func (o *UpgradeSchemaVersion200Response) GetAdditionalInformation() UpgradeSchemaVersion200ResponseAdditionalInformation {
	if o == nil || IsNil(o.AdditionalInformation) {
		var ret UpgradeSchemaVersion200ResponseAdditionalInformation
		return ret
	}
	return *o.AdditionalInformation
}

// GetAdditionalInformationOk returns a tuple with the AdditionalInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeSchemaVersion200Response) GetAdditionalInformationOk() (*UpgradeSchemaVersion200ResponseAdditionalInformation, bool) {
	if o == nil || IsNil(o.AdditionalInformation) {
		return nil, false
	}
	return o.AdditionalInformation, true
}

// HasAdditionalInformation returns a boolean if a field has been set.
func (o *UpgradeSchemaVersion200Response) HasAdditionalInformation() bool {
	if o != nil && !IsNil(o.AdditionalInformation) {
		return true
	}

	return false
}

// SetAdditionalInformation gets a reference to the given UpgradeSchemaVersion200ResponseAdditionalInformation and assigns it to the AdditionalInformation field.
func (o *UpgradeSchemaVersion200Response) SetAdditionalInformation(v UpgradeSchemaVersion200ResponseAdditionalInformation) {
	o.AdditionalInformation = &v
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *UpgradeSchemaVersion200Response) GetTaskId() string {
	if o == nil || IsNil(o.TaskId) {
		var ret string
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeSchemaVersion200Response) GetTaskIdOk() (*string, bool) {
	if o == nil || IsNil(o.TaskId) {
		return nil, false
	}
	return o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *UpgradeSchemaVersion200Response) HasTaskId() bool {
	if o != nil && !IsNil(o.TaskId) {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given string and assigns it to the TaskId field.
func (o *UpgradeSchemaVersion200Response) SetTaskId(v string) {
	o.TaskId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpgradeSchemaVersion200Response) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeSchemaVersion200Response) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpgradeSchemaVersion200Response) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UpgradeSchemaVersion200Response) SetType(v string) {
	o.Type = &v
}

func (o UpgradeSchemaVersion200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpgradeSchemaVersion200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalInformation) {
		toSerialize["additionalInformation"] = o.AdditionalInformation
	}
	if !IsNil(o.TaskId) {
		toSerialize["taskId"] = o.TaskId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableUpgradeSchemaVersion200Response struct {
	value *UpgradeSchemaVersion200Response
	isSet bool
}

func (v NullableUpgradeSchemaVersion200Response) Get() *UpgradeSchemaVersion200Response {
	return v.value
}

func (v *NullableUpgradeSchemaVersion200Response) Set(val *UpgradeSchemaVersion200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradeSchemaVersion200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradeSchemaVersion200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradeSchemaVersion200Response(val *UpgradeSchemaVersion200Response) *NullableUpgradeSchemaVersion200Response {
	return &NullableUpgradeSchemaVersion200Response{value: val, isSet: true}
}

func (v NullableUpgradeSchemaVersion200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradeSchemaVersion200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


