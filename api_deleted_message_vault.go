/*
Apache JAMES Web Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DeletedMessageVaultAPIService DeletedMessageVaultAPI service
type DeletedMessageVaultAPIService service

type ApiExportDeletedMessagesRequest struct {
	ctx context.Context
	ApiService *DeletedMessageVaultAPIService
	user string
	exportTo *string
	exportDeletedMessagesRequest *ExportDeletedMessagesRequest
}

// The email address to export the messages to
func (r ApiExportDeletedMessagesRequest) ExportTo(exportTo string) ApiExportDeletedMessagesRequest {
	r.exportTo = &exportTo
	return r
}

func (r ApiExportDeletedMessagesRequest) ExportDeletedMessagesRequest(exportDeletedMessagesRequest ExportDeletedMessagesRequest) ApiExportDeletedMessagesRequest {
	r.exportDeletedMessagesRequest = &exportDeletedMessagesRequest
	return r
}

func (r ApiExportDeletedMessagesRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExportDeletedMessagesExecute(r)
}

/*
ExportDeletedMessages Export deleted messages for a specific user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param user The user to export deleted messages from
 @return ApiExportDeletedMessagesRequest
*/
func (a *DeletedMessageVaultAPIService) ExportDeletedMessages(ctx context.Context, user string) ApiExportDeletedMessagesRequest {
	return ApiExportDeletedMessagesRequest{
		ApiService: a,
		ctx: ctx,
		user: user,
	}
}

// Execute executes the request
func (a *DeletedMessageVaultAPIService) ExportDeletedMessagesExecute(r ApiExportDeletedMessagesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeletedMessageVaultAPIService.ExportDeletedMessages")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deletedMessages/users/{user}/actions/export"
	localVarPath = strings.Replace(localVarPath, "{"+"user"+"}", url.PathEscape(parameterValueToString(r.user, "user")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.exportTo == nil {
		return nil, reportError("exportTo is required and must be specified")
	}
	if r.exportDeletedMessagesRequest == nil {
		return nil, reportError("exportDeletedMessagesRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "exportTo", r.exportTo, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exportDeletedMessagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPurgeMessageRequest struct {
	ctx context.Context
	ApiService *DeletedMessageVaultAPIService
	user string
	messageId string
}

func (r ApiPurgeMessageRequest) Execute() (*http.Response, error) {
	return r.ApiService.PurgeMessageExecute(r)
}

/*
PurgeMessage Permanently remove a deleted message

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param user The user of the deleted message
 @param messageId The ID of the deleted message
 @return ApiPurgeMessageRequest
*/
func (a *DeletedMessageVaultAPIService) PurgeMessage(ctx context.Context, user string, messageId string) ApiPurgeMessageRequest {
	return ApiPurgeMessageRequest{
		ApiService: a,
		ctx: ctx,
		user: user,
		messageId: messageId,
	}
}

// Execute executes the request
func (a *DeletedMessageVaultAPIService) PurgeMessageExecute(r ApiPurgeMessageRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeletedMessageVaultAPIService.PurgeMessage")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deletedMessages/users/{user}/messages/{messageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"user"+"}", url.PathEscape(parameterValueToString(r.user, "user")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"messageId"+"}", url.PathEscape(parameterValueToString(r.messageId, "messageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPurgeMessagesRequest struct {
	ctx context.Context
	ApiService *DeletedMessageVaultAPIService
	scope *string
}

// The scope of messages to purge
func (r ApiPurgeMessagesRequest) Scope(scope string) ApiPurgeMessagesRequest {
	r.scope = &scope
	return r
}

func (r ApiPurgeMessagesRequest) Execute() (*http.Response, error) {
	return r.ApiService.PurgeMessagesExecute(r)
}

/*
PurgeMessages Purge all expired deleted messages

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPurgeMessagesRequest
*/
func (a *DeletedMessageVaultAPIService) PurgeMessages(ctx context.Context) ApiPurgeMessagesRequest {
	return ApiPurgeMessagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DeletedMessageVaultAPIService) PurgeMessagesExecute(r ApiPurgeMessagesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeletedMessageVaultAPIService.PurgeMessages")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deletedMessages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.scope == nil {
		return nil, reportError("scope is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "scope", r.scope, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRestoreDeletedMessagesRequest struct {
	ctx context.Context
	ApiService *DeletedMessageVaultAPIService
	user string
	exportDeletedMessagesRequest *ExportDeletedMessagesRequest
}

func (r ApiRestoreDeletedMessagesRequest) ExportDeletedMessagesRequest(exportDeletedMessagesRequest ExportDeletedMessagesRequest) ApiRestoreDeletedMessagesRequest {
	r.exportDeletedMessagesRequest = &exportDeletedMessagesRequest
	return r
}

func (r ApiRestoreDeletedMessagesRequest) Execute() (*http.Response, error) {
	return r.ApiService.RestoreDeletedMessagesExecute(r)
}

/*
RestoreDeletedMessages Restore deleted messages for a specific user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param user The user to restore deleted messages for
 @return ApiRestoreDeletedMessagesRequest
*/
func (a *DeletedMessageVaultAPIService) RestoreDeletedMessages(ctx context.Context, user string) ApiRestoreDeletedMessagesRequest {
	return ApiRestoreDeletedMessagesRequest{
		ApiService: a,
		ctx: ctx,
		user: user,
	}
}

// Execute executes the request
func (a *DeletedMessageVaultAPIService) RestoreDeletedMessagesExecute(r ApiRestoreDeletedMessagesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeletedMessageVaultAPIService.RestoreDeletedMessages")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deletedMessages/users/{user}/actions/restore"
	localVarPath = strings.Replace(localVarPath, "{"+"user"+"}", url.PathEscape(parameterValueToString(r.user, "user")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.exportDeletedMessagesRequest == nil {
		return nil, reportError("exportDeletedMessagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exportDeletedMessagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
